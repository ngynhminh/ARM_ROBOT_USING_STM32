
VDK_PILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005950  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c88  08005c88  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c88  08005c88  00006c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c90  08005c90  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c90  08005c90  00006c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c94  08005c94  00006c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005c98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000006c  08005d04  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08005d04  000073bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5a9  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002227  00000000  00000000  0001663e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00018868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb5  00000000  00000000  00019878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182d3  00000000  00000000  0001a52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120e0  00000000  00000000  00032800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d363  00000000  00000000  000448e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  000d1c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d6918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a44 	.word	0x08005a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005a44 	.word	0x08005a44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_Init>:
        0b00110,
        0b00000
};

void LCD_Init(uint8_t rows)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000166:	4a38      	ldr	r2, [pc, #224]	@ (8000248 <LCD_Init+0xec>)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800016c:	4b37      	ldr	r3, [pc, #220]	@ (800024c <LCD_Init+0xf0>)
 800016e:	2208      	movs	r2, #8
 8000170:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000172:	4b37      	ldr	r3, [pc, #220]	@ (8000250 <LCD_Init+0xf4>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000178:	4b33      	ldr	r3, [pc, #204]	@ (8000248 <LCD_Init+0xec>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d907      	bls.n	8000190 <LCD_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000180:	4b33      	ldr	r3, [pc, #204]	@ (8000250 <LCD_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b31      	ldr	r3, [pc, #196]	@ (8000250 <LCD_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	e006      	b.n	800019e <LCD_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000190:	4b2f      	ldr	r3, [pc, #188]	@ (8000250 <LCD_Init+0xf4>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b2d      	ldr	r3, [pc, #180]	@ (8000250 <LCD_Init+0xf4>)
 800019c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800019e:	f000 f993 	bl	80004c8 <DelayInit>
  HAL_Delay(50);
 80001a2:	2032      	movs	r0, #50	@ 0x32
 80001a4:	f001 fa68 	bl	8001678 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80001a8:	4b28      	ldr	r3, [pc, #160]	@ (800024c <LCD_Init+0xf0>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f951 	bl	8000454 <ExpanderWrite>
  HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b6:	f001 fa5f 	bl	8001678 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ba:	2030      	movs	r0, #48	@ 0x30
 80001bc:	f000 f939 	bl	8000432 <Write4Bits>
  DelayUS(4500);
 80001c0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001c4:	f000 f9a8 	bl	8000518 <DelayUS>

  Write4Bits(0x03 << 4);
 80001c8:	2030      	movs	r0, #48	@ 0x30
 80001ca:	f000 f932 	bl	8000432 <Write4Bits>
  DelayUS(4500);
 80001ce:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001d2:	f000 f9a1 	bl	8000518 <DelayUS>

  Write4Bits(0x03 << 4);
 80001d6:	2030      	movs	r0, #48	@ 0x30
 80001d8:	f000 f92b 	bl	8000432 <Write4Bits>
  DelayUS(4500);
 80001dc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001e0:	f000 f99a 	bl	8000518 <DelayUS>

  Write4Bits(0x02 << 4);
 80001e4:	2020      	movs	r0, #32
 80001e6:	f000 f924 	bl	8000432 <Write4Bits>
  DelayUS(100);
 80001ea:	2064      	movs	r0, #100	@ 0x64
 80001ec:	f000 f994 	bl	8000518 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001f0:	4b17      	ldr	r3, [pc, #92]	@ (8000250 <LCD_Init+0xf4>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f8dc 	bl	80003b8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000200:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <LCD_Init+0xf8>)
 8000202:	2204      	movs	r2, #4
 8000204:	701a      	strb	r2, [r3, #0]
  LCD_Display();
 8000206:	f000 f875 	bl	80002f4 <LCD_Display>
  LCD_Clear();
 800020a:	f000 f82b 	bl	8000264 <LCD_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800020e:	4b12      	ldr	r3, [pc, #72]	@ (8000258 <LCD_Init+0xfc>)
 8000210:	2202      	movs	r2, #2
 8000212:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000214:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <LCD_Init+0xfc>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f8ca 	bl	80003b8 <SendCommand>
  DelayUS(4500);
 8000224:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000228:	f000 f976 	bl	8000518 <DelayUS>

  LCD_CreateSpecialChar(0, special1);
 800022c:	490b      	ldr	r1, [pc, #44]	@ (800025c <LCD_Init+0x100>)
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f876 	bl	8000320 <LCD_CreateSpecialChar>
  LCD_CreateSpecialChar(1, special2);
 8000234:	490a      	ldr	r1, [pc, #40]	@ (8000260 <LCD_Init+0x104>)
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f872 	bl	8000320 <LCD_CreateSpecialChar>

  LCD_Home();
 800023c:	f000 f81d 	bl	800027a <LCD_Home>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000008b 	.word	0x2000008b
 800024c:	2000008c 	.word	0x2000008c
 8000250:	20000088 	.word	0x20000088
 8000254:	20000089 	.word	0x20000089
 8000258:	2000008a 	.word	0x2000008a
 800025c:	20000000 	.word	0x20000000
 8000260:	20000008 	.word	0x20000008

08000264 <LCD_Clear>:

void LCD_Clear()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f8a5 	bl	80003b8 <SendCommand>
  DelayUS(2000);
 800026e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000272:	f000 f951 	bl	8000518 <DelayUS>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}

0800027a <LCD_Home>:

void LCD_Home()
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800027e:	2002      	movs	r0, #2
 8000280:	f000 f89a 	bl	80003b8 <SendCommand>
  DelayUS(2000);
 8000284:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000288:	f000 f946 	bl	8000518 <DelayUS>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80002a0:	4b12      	ldr	r3, [pc, #72]	@ (80002ec <LCD_SetCursor+0x5c>)
 80002a2:	f107 0408 	add.w	r4, r7, #8
 80002a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <LCD_SetCursor+0x60>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d303      	bcc.n	80002be <LCD_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <LCD_SetCursor+0x60>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	3318      	adds	r3, #24
 80002c4:	443b      	add	r3, r7
 80002c6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4413      	add	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f86b 	bl	80003b8 <SendCommand>
}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08005a5c 	.word	0x08005a5c
 80002f0:	2000008b 	.word	0x2000008b

080002f4 <LCD_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD_Display()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <LCD_Display+0x28>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <LCD_Display+0x28>)
 8000304:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000306:	4b05      	ldr	r3, [pc, #20]	@ (800031c <LCD_Display+0x28>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f851 	bl	80003b8 <SendCommand>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000089 	.word	0x20000089

08000320 <LCD_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void LCD_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	b25b      	sxtb	r3, r3
 800033c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000340:	b25b      	sxtb	r3, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f837 	bl	80003b8 <SendCommand>
  for (int i=0; i<8; i++)
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e009      	b.n	8000364 <LCD_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	683a      	ldr	r2, [r7, #0]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f83b 	bl	80003d4 <SendChar>
  for (int i=0; i<8; i++)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b07      	cmp	r3, #7
 8000368:	ddf2      	ble.n	8000350 <LCD_CreateSpecialChar+0x30>
  }
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <LCD_PrintStr>:
{
  LCD_CreateSpecialChar(char_num, rows);
}

void LCD_PrintStr(const char c[])
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800037c:	e006      	b.n	800038c <LCD_PrintStr+0x18>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	607a      	str	r2, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f824 	bl	80003d4 <SendChar>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f4      	bne.n	800037e <LCD_PrintStr+0xa>
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <LCD_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void LCD_Backlight(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80003a4:	4b03      	ldr	r3, [pc, #12]	@ (80003b4 <LCD_Backlight+0x14>)
 80003a6:	2208      	movs	r2, #8
 80003a8:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 f852 	bl	8000454 <ExpanderWrite>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	2000008c 	.word	0x2000008c

080003b8 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f812 	bl	80003f0 <Send>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2101      	movs	r1, #1
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f804 	bl	80003f0 <Send>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	4613      	mov	r3, r2
 80003fe:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	f023 030f 	bic.w	r3, r3, #15
 8000406:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	011b      	lsls	r3, r3, #4
 800040c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800040e:	7bfa      	ldrb	r2, [r7, #15]
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	4313      	orrs	r3, r2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f80b 	bl	8000432 <Write4Bits>
  Write4Bits((lownib)|mode);
 800041c:	7bba      	ldrb	r2, [r7, #14]
 800041e:	79bb      	ldrb	r3, [r7, #6]
 8000420:	4313      	orrs	r3, r2
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f804 	bl	8000432 <Write4Bits>
}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f808 	bl	8000454 <ExpanderWrite>
  PulseEnable(value);
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f820 	bl	800048c <PulseEnable>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af02      	add	r7, sp, #8
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <ExpanderWrite+0x30>)
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	4313      	orrs	r3, r2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800046a:	f107 020f 	add.w	r2, r7, #15
 800046e:	230a      	movs	r3, #10
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	214e      	movs	r1, #78	@ 0x4e
 8000476:	4804      	ldr	r0, [pc, #16]	@ (8000488 <ExpanderWrite+0x34>)
 8000478:	f001 fdda 	bl	8002030 <HAL_I2C_Master_Transmit>
}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000008c 	.word	0x2000008c
 8000488:	20000090 	.word	0x20000090

0800048c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ffd8 	bl	8000454 <ExpanderWrite>
  DelayUS(20);
 80004a4:	2014      	movs	r0, #20
 80004a6:	f000 f837 	bl	8000518 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	f023 0304 	bic.w	r3, r3, #4
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ffce 	bl	8000454 <ExpanderWrite>
  DelayUS(20);
 80004b8:	2014      	movs	r0, #20
 80004ba:	f000 f82d 	bl	8000518 <DelayUS>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <DelayInit>:

static void DelayInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <DelayInit+0x48>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <DelayInit+0x48>)
 80004d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004d6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <DelayInit+0x48>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <DelayInit+0x48>)
 80004de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <DelayInit+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <DelayInit+0x4c>)
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <DelayInit+0x4c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <DelayInit+0x4c>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <DelayInit+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000502:	bf00      	nop
  __ASM volatile ("NOP");
 8000504:	bf00      	nop
  __ASM volatile ("NOP");
 8000506:	bf00      	nop
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	e000edf0 	.word	0xe000edf0
 8000514:	e0001000 	.word	0xe0001000

08000518 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <DelayUS+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <DelayUS+0x44>)
 8000526:	fba2 2303 	umull	r2, r3, r2, r3
 800052a:	0c9a      	lsrs	r2, r3, #18
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000534:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <DelayUS+0x48>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <DelayUS+0x48>)
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	429a      	cmp	r2, r3
 800054a:	d8f6      	bhi.n	800053a <DelayUS+0x22>
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000010 	.word	0x20000010
 800055c:	431bde83 	.word	0x431bde83
 8000560:	e0001000 	.word	0xe0001000

08000564 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <microDelay+0x2c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 8000576:	bf00      	nop
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <microDelay+0x2c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	429a      	cmp	r2, r3
 8000582:	d3f9      	bcc.n	8000578 <microDelay+0x14>
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	2000012c 	.word	0x2000012c

08000594 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80005aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	482c      	ldr	r0, [pc, #176]	@ (8000674 <DHT11_Start+0xe0>)
 80005c2:	f001 fa3d 	bl	8001a40 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <DHT11_Start+0xe0>)
 80005ce:	f001 fbd2 	bl	8001d76 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 80005d2:	2014      	movs	r0, #20
 80005d4:	f001 f850 	bl	8001678 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005de:	4825      	ldr	r0, [pc, #148]	@ (8000674 <DHT11_Start+0xe0>)
 80005e0:	f001 fbc9 	bl	8001d76 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80005e4:	201e      	movs	r0, #30
 80005e6:	f7ff ffbd 	bl	8000564 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	481f      	ldr	r0, [pc, #124]	@ (8000674 <DHT11_Start+0xe0>)
 80005f8:	f001 fa22 	bl	8001a40 <HAL_GPIO_Init>
  microDelay (40);
 80005fc:	2028      	movs	r0, #40	@ 0x28
 80005fe:	f7ff ffb1 	bl	8000564 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <DHT11_Start+0xe0>)
 8000608:	f001 fb9e 	bl	8001d48 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10c      	bne.n	800062c <DHT11_Start+0x98>
  {
    microDelay (80);
 8000612:	2050      	movs	r0, #80	@ 0x50
 8000614:	f7ff ffa6 	bl	8000564 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800061c:	4815      	ldr	r0, [pc, #84]	@ (8000674 <DHT11_Start+0xe0>)
 800061e:	f001 fb93 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <DHT11_Start+0x98>
 8000628:	2301      	movs	r3, #1
 800062a:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 800062c:	f001 f81a 	bl	8001664 <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
 8000632:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <DHT11_Start+0xe4>)
 8000634:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000636:	f001 f815 	bl	8001664 <HAL_GetTick>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <DHT11_Start+0xe8>)
 800063e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000640:	e004      	b.n	800064c <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000642:	f001 f80f 	bl	8001664 <HAL_GetTick>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <DHT11_Start+0xe8>)
 800064a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800064c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000650:	4808      	ldr	r0, [pc, #32]	@ (8000674 <DHT11_Start+0xe0>)
 8000652:	f001 fb79 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <DHT11_Start+0xd6>
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <DHT11_Start+0xe4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c9a      	adds	r2, r3, #2
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <DHT11_Start+0xe8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	429a      	cmp	r2, r3
 8000668:	d8eb      	bhi.n	8000642 <DHT11_Start+0xae>
  }
  return Response;
 800066a:	7dfb      	ldrb	r3, [r7, #23]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40010c00 	.word	0x40010c00
 8000678:	20000264 	.word	0x20000264
 800067c:	20000268 	.word	0x20000268

08000680 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e066      	b.n	800075a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 800068c:	f000 ffea 	bl	8001664 <HAL_GetTick>
 8000690:	4603      	mov	r3, r0
 8000692:	4a36      	ldr	r2, [pc, #216]	@ (800076c <DHT11_Read+0xec>)
 8000694:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000696:	f000 ffe5 	bl	8001664 <HAL_GetTick>
 800069a:	4603      	mov	r3, r0
 800069c:	4a34      	ldr	r2, [pc, #208]	@ (8000770 <DHT11_Read+0xf0>)
 800069e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80006a0:	e004      	b.n	80006ac <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80006a2:	f000 ffdf 	bl	8001664 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a31      	ldr	r2, [pc, #196]	@ (8000770 <DHT11_Read+0xf0>)
 80006aa:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80006ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b0:	4830      	ldr	r0, [pc, #192]	@ (8000774 <DHT11_Read+0xf4>)
 80006b2:	f001 fb49 	bl	8001d48 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <DHT11_Read+0x4a>
 80006bc:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <DHT11_Read+0xec>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	1c9a      	adds	r2, r3, #2
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <DHT11_Read+0xf0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d8eb      	bhi.n	80006a2 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80006ca:	2028      	movs	r0, #40	@ 0x28
 80006cc:	f7ff ff4a 	bl	8000564 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80006d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d4:	4827      	ldr	r0, [pc, #156]	@ (8000774 <DHT11_Read+0xf4>)
 80006d6:	f001 fb37 	bl	8001d48 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10e      	bne.n	80006fe <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2201      	movs	r2, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	b25a      	sxtb	r2, r3
 80006f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006f6:	4013      	ands	r3, r2
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	71bb      	strb	r3, [r7, #6]
 80006fc:	e00b      	b.n	8000716 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f1c3 0307 	rsb	r3, r3, #7
 8000704:	2201      	movs	r2, #1
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	b25a      	sxtb	r2, r3
 800070c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000710:	4313      	orrs	r3, r2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000716:	f000 ffa5 	bl	8001664 <HAL_GetTick>
 800071a:	4603      	mov	r3, r0
 800071c:	4a13      	ldr	r2, [pc, #76]	@ (800076c <DHT11_Read+0xec>)
 800071e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000720:	f000 ffa0 	bl	8001664 <HAL_GetTick>
 8000724:	4603      	mov	r3, r0
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <DHT11_Read+0xf0>)
 8000728:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800072a:	e004      	b.n	8000736 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 800072c:	f000 ff9a 	bl	8001664 <HAL_GetTick>
 8000730:	4603      	mov	r3, r0
 8000732:	4a0f      	ldr	r2, [pc, #60]	@ (8000770 <DHT11_Read+0xf0>)
 8000734:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073a:	480e      	ldr	r0, [pc, #56]	@ (8000774 <DHT11_Read+0xf4>)
 800073c:	f001 fb04 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <DHT11_Read+0xd4>
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <DHT11_Read+0xec>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1c9a      	adds	r2, r3, #2
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <DHT11_Read+0xf0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8eb      	bhi.n	800072c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	3301      	adds	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b07      	cmp	r3, #7
 800075e:	d995      	bls.n	800068c <DHT11_Read+0xc>
    }
  }
  return b;
 8000760:	79bb      	ldrb	r3, [r7, #6]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000264 	.word	0x20000264
 8000770:	20000268 	.word	0x20000268
 8000774:	40010c00 	.word	0x40010c00

08000778 <UART_Send>:
// Hàm gửi dữ liệu qua UART
void UART_Send(const char* message)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fce3 	bl	800014c <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29a      	uxth	r2, r3
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <UART_Send+0x28>)
 8000792:	f003 f9e7 	bl	8003b64 <HAL_UART_Transmit>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000174 	.word	0x20000174

080007a4 <UART_Receive>:

// Bắt đầu nhận từng byte qua UART
void UART_Receive(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxChar, 1); // Nhận từng ký tự
 80007a8:	2201      	movs	r2, #1
 80007aa:	4903      	ldr	r1, [pc, #12]	@ (80007b8 <UART_Receive+0x14>)
 80007ac:	4803      	ldr	r0, [pc, #12]	@ (80007bc <UART_Receive+0x18>)
 80007ae:	f003 fa64 	bl	8003c7a <HAL_UART_Receive_IT>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000254 	.word	0x20000254
 80007bc:	20000174 	.word	0x20000174

080007c0 <ProcessReceivedData>:

// Hàm xử lý dữ liệu nhận được từ UART
void ProcessReceivedData(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    if (sscanf(rxBuffer, "%c%d", &pillType, &quantity) == 2)  // Đọc dữ liệu thành công
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <ProcessReceivedData+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <ProcessReceivedData+0x50>)
 80007c8:	4912      	ldr	r1, [pc, #72]	@ (8000814 <ProcessReceivedData+0x54>)
 80007ca:	4813      	ldr	r0, [pc, #76]	@ (8000818 <ProcessReceivedData+0x58>)
 80007cc:	f004 f806 	bl	80047dc <siscanf>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d115      	bne.n	8000802 <ProcessReceivedData+0x42>
    {
            sprintf(txBuffer, "Pill Type: %c, Quantity: %d\r\n", pillType, quantity);
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <ProcessReceivedData+0x50>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <ProcessReceivedData+0x4c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	490e      	ldr	r1, [pc, #56]	@ (800081c <ProcessReceivedData+0x5c>)
 80007e4:	480e      	ldr	r0, [pc, #56]	@ (8000820 <ProcessReceivedData+0x60>)
 80007e6:	f003 ffd7 	bl	8004798 <siprintf>
            UART_Send(txBuffer);
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <ProcessReceivedData+0x60>)
 80007ec:	f7ff ffc4 	bl	8000778 <UART_Send>
            ARM_Process(pillType,quantity);
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <ProcessReceivedData+0x50>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <ProcessReceivedData+0x4c>)
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f813 	bl	8000828 <ARM_Process>
    }
    rxIndex = 0;  // Reset vị trí buffer
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <ProcessReceivedData+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000258 	.word	0x20000258
 8000810:	20000257 	.word	0x20000257
 8000814:	08005a6c 	.word	0x08005a6c
 8000818:	200001bc 	.word	0x200001bc
 800081c:	08005a74 	.word	0x08005a74
 8000820:	200001f0 	.word	0x200001f0
 8000824:	20000255 	.word	0x20000255

08000828 <ARM_Process>:
void ARM_Process(char pillType, int quantity) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b092      	sub	sp, #72	@ 0x48
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
	switch (pillType) {
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b43      	cmp	r3, #67	@ 0x43
 8000838:	f000 810f 	beq.w	8000a5a <ARM_Process+0x232>
 800083c:	2b43      	cmp	r3, #67	@ 0x43
 800083e:	f300 818f 	bgt.w	8000b60 <ARM_Process+0x338>
 8000842:	2b41      	cmp	r3, #65	@ 0x41
 8000844:	d003      	beq.n	800084e <ARM_Process+0x26>
 8000846:	2b42      	cmp	r3, #66	@ 0x42
 8000848:	f000 8084 	beq.w	8000954 <ARM_Process+0x12c>
 800084c:	e188      	b.n	8000b60 <ARM_Process+0x338>
	   case 'A':
		   for(int i=quantity;i>0;i--){
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	647b      	str	r3, [r7, #68]	@ 0x44
 8000852:	e07b      	b.n	800094c <ARM_Process+0x124>
			   LCD_Clear();
 8000854:	f7ff fd06 	bl	8000264 <LCD_Clear>
			   HAL_Delay(100);
 8000858:	2064      	movs	r0, #100	@ 0x64
 800085a:	f000 ff0d 	bl	8001678 <HAL_Delay>
			   LCD_SetCursor(0, 0);
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd15 	bl	8000290 <LCD_SetCursor>
			   LCD_PrintStr("Thuoc dau bung");
 8000866:	48c2      	ldr	r0, [pc, #776]	@ (8000b70 <ARM_Process+0x348>)
 8000868:	f7ff fd84 	bl	8000374 <LCD_PrintStr>
			   LCD_SetCursor(0, 1);
 800086c:	2101      	movs	r1, #1
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fd0e 	bl	8000290 <LCD_SetCursor>
			   char buffer[16];
			   sprintf(buffer, "So luong: %d", quantity); // Hiển thị số lượng
 8000874:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	49be      	ldr	r1, [pc, #760]	@ (8000b74 <ARM_Process+0x34c>)
 800087c:	4618      	mov	r0, r3
 800087e:	f003 ff8b 	bl	8004798 <siprintf>
			   LCD_PrintStr(buffer);
 8000882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fd74 	bl	8000374 <LCD_PrintStr>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 800088c:	225a      	movs	r2, #90	@ 0x5a
 800088e:	2108      	movs	r1, #8
 8000890:	48b9      	ldr	r0, [pc, #740]	@ (8000b78 <ARM_Process+0x350>)
 8000892:	f000 f97d 	bl	8000b90 <Set_Servo_Angle>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 135);
 8000896:	2287      	movs	r2, #135	@ 0x87
 8000898:	2104      	movs	r1, #4
 800089a:	48b7      	ldr	r0, [pc, #732]	@ (8000b78 <ARM_Process+0x350>)
 800089c:	f000 f978 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a4:	f000 fee8 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 180);
 80008a8:	22b4      	movs	r2, #180	@ 0xb4
 80008aa:	2100      	movs	r1, #0
 80008ac:	48b2      	ldr	r0, [pc, #712]	@ (8000b78 <ARM_Process+0x350>)
 80008ae:	f000 f96f 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80008b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b6:	f000 fedf 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 115);
 80008ba:	2273      	movs	r2, #115	@ 0x73
 80008bc:	2108      	movs	r1, #8
 80008be:	48ae      	ldr	r0, [pc, #696]	@ (8000b78 <ARM_Process+0x350>)
 80008c0:	f000 f966 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80008c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c8:	f000 fed6 	bl	8001678 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2108      	movs	r1, #8
 80008d0:	48aa      	ldr	r0, [pc, #680]	@ (8000b7c <ARM_Process+0x354>)
 80008d2:	f001 fa50 	bl	8001d76 <HAL_GPIO_WritePin>
			   HAL_Delay(5000);
 80008d6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008da:	f000 fecd 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2104      	movs	r1, #4
 80008e2:	48a5      	ldr	r0, [pc, #660]	@ (8000b78 <ARM_Process+0x350>)
 80008e4:	f000 f954 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80008e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ec:	f000 fec4 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 80008f0:	225a      	movs	r2, #90	@ 0x5a
 80008f2:	2108      	movs	r1, #8
 80008f4:	48a0      	ldr	r0, [pc, #640]	@ (8000b78 <ARM_Process+0x350>)
 80008f6:	f000 f94b 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008fe:	f000 febb 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	489c      	ldr	r0, [pc, #624]	@ (8000b78 <ARM_Process+0x350>)
 8000908:	f000 f942 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000910:	f000 feb2 	bl	8001678 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2108      	movs	r1, #8
 8000918:	4898      	ldr	r0, [pc, #608]	@ (8000b7c <ARM_Process+0x354>)
 800091a:	f001 fa2c 	bl	8001d76 <HAL_GPIO_WritePin>
			   HAL_Delay(2000);
 800091e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000922:	f000 fea9 	bl	8001678 <HAL_Delay>
			   LCD_Clear();
 8000926:	f7ff fc9d 	bl	8000264 <LCD_Clear>
			   HAL_Delay(20);
 800092a:	2014      	movs	r0, #20
 800092c:	f000 fea4 	bl	8001678 <HAL_Delay>
			   LCD_SetCursor(0, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff fcac 	bl	8000290 <LCD_SetCursor>
			   LCD_PrintStr("Thanh cong");
 8000938:	4891      	ldr	r0, [pc, #580]	@ (8000b80 <ARM_Process+0x358>)
 800093a:	f7ff fd1b 	bl	8000374 <LCD_PrintStr>
			   HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000942:	f000 fe99 	bl	8001678 <HAL_Delay>
		   for(int i=quantity;i>0;i--){
 8000946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000948:	3b01      	subs	r3, #1
 800094a:	647b      	str	r3, [r7, #68]	@ 0x44
 800094c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800094e:	2b00      	cmp	r3, #0
 8000950:	dc80      	bgt.n	8000854 <ARM_Process+0x2c>
		   }
	              // Gọi hàm di chuyển tay robot kiểu A
	            break;
 8000952:	e105      	b.n	8000b60 <ARM_Process+0x338>
	   case 'B':
		   for(int i=quantity;i>0;i--){
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	643b      	str	r3, [r7, #64]	@ 0x40
 8000958:	e07b      	b.n	8000a52 <ARM_Process+0x22a>
			   LCD_Clear();
 800095a:	f7ff fc83 	bl	8000264 <LCD_Clear>
			   HAL_Delay(100);
 800095e:	2064      	movs	r0, #100	@ 0x64
 8000960:	f000 fe8a 	bl	8001678 <HAL_Delay>
			   LCD_SetCursor(0, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fc92 	bl	8000290 <LCD_SetCursor>
			   LCD_PrintStr("Thuoc ha sot");
 800096c:	4885      	ldr	r0, [pc, #532]	@ (8000b84 <ARM_Process+0x35c>)
 800096e:	f7ff fd01 	bl	8000374 <LCD_PrintStr>
			   LCD_SetCursor(0, 1);
 8000972:	2101      	movs	r1, #1
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fc8b 	bl	8000290 <LCD_SetCursor>
			   char buffer[16];
			   sprintf(buffer, "So luong: %d", quantity); // Hiển thị số lượng
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	497c      	ldr	r1, [pc, #496]	@ (8000b74 <ARM_Process+0x34c>)
 8000982:	4618      	mov	r0, r3
 8000984:	f003 ff08 	bl	8004798 <siprintf>
			   LCD_PrintStr(buffer);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fcf1 	bl	8000374 <LCD_PrintStr>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 8000992:	225a      	movs	r2, #90	@ 0x5a
 8000994:	2108      	movs	r1, #8
 8000996:	4878      	ldr	r0, [pc, #480]	@ (8000b78 <ARM_Process+0x350>)
 8000998:	f000 f8fa 	bl	8000b90 <Set_Servo_Angle>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 135);
 800099c:	2287      	movs	r2, #135	@ 0x87
 800099e:	2104      	movs	r1, #4
 80009a0:	4875      	ldr	r0, [pc, #468]	@ (8000b78 <ARM_Process+0x350>)
 80009a2:	f000 f8f5 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80009a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009aa:	f000 fe65 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 135);
 80009ae:	2287      	movs	r2, #135	@ 0x87
 80009b0:	2100      	movs	r1, #0
 80009b2:	4871      	ldr	r0, [pc, #452]	@ (8000b78 <ARM_Process+0x350>)
 80009b4:	f000 f8ec 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009bc:	f000 fe5c 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 115);
 80009c0:	2273      	movs	r2, #115	@ 0x73
 80009c2:	2108      	movs	r1, #8
 80009c4:	486c      	ldr	r0, [pc, #432]	@ (8000b78 <ARM_Process+0x350>)
 80009c6:	f000 f8e3 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80009ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ce:	f000 fe53 	bl	8001678 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	4869      	ldr	r0, [pc, #420]	@ (8000b7c <ARM_Process+0x354>)
 80009d8:	f001 f9cd 	bl	8001d76 <HAL_GPIO_WritePin>
			   HAL_Delay(5000);
 80009dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80009e0:	f000 fe4a 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	4863      	ldr	r0, [pc, #396]	@ (8000b78 <ARM_Process+0x350>)
 80009ea:	f000 f8d1 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f000 fe41 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 80009f6:	225a      	movs	r2, #90	@ 0x5a
 80009f8:	2108      	movs	r1, #8
 80009fa:	485f      	ldr	r0, [pc, #380]	@ (8000b78 <ARM_Process+0x350>)
 80009fc:	f000 f8c8 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a04:	f000 fe38 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	485a      	ldr	r0, [pc, #360]	@ (8000b78 <ARM_Process+0x350>)
 8000a0e:	f000 f8bf 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000a12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a16:	f000 fe2f 	bl	8001678 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	4857      	ldr	r0, [pc, #348]	@ (8000b7c <ARM_Process+0x354>)
 8000a20:	f001 f9a9 	bl	8001d76 <HAL_GPIO_WritePin>
			   HAL_Delay(2000);
 8000a24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a28:	f000 fe26 	bl	8001678 <HAL_Delay>
			   LCD_Clear();
 8000a2c:	f7ff fc1a 	bl	8000264 <LCD_Clear>
			   HAL_Delay(20);
 8000a30:	2014      	movs	r0, #20
 8000a32:	f000 fe21 	bl	8001678 <HAL_Delay>
			   LCD_SetCursor(0, 0);
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fc29 	bl	8000290 <LCD_SetCursor>
			   LCD_PrintStr("Thanh cong");
 8000a3e:	4850      	ldr	r0, [pc, #320]	@ (8000b80 <ARM_Process+0x358>)
 8000a40:	f7ff fc98 	bl	8000374 <LCD_PrintStr>
			   HAL_Delay(1000);
 8000a44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a48:	f000 fe16 	bl	8001678 <HAL_Delay>
		   for(int i=quantity;i>0;i--){
 8000a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	dc80      	bgt.n	800095a <ARM_Process+0x132>
		   }
	              // Gọi hàm di chuyển tay robot kiểu B
	            break;
 8000a58:	e082      	b.n	8000b60 <ARM_Process+0x338>
	   case 'C':
		   for(int i=quantity;i>0;i--){
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a5e:	e07b      	b.n	8000b58 <ARM_Process+0x330>
			   LCD_Clear();
 8000a60:	f7ff fc00 	bl	8000264 <LCD_Clear>
			   HAL_Delay(100);
 8000a64:	2064      	movs	r0, #100	@ 0x64
 8000a66:	f000 fe07 	bl	8001678 <HAL_Delay>
			   LCD_SetCursor(0, 0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fc0f 	bl	8000290 <LCD_SetCursor>
			   LCD_PrintStr("Thuoc dau dau");
 8000a72:	4845      	ldr	r0, [pc, #276]	@ (8000b88 <ARM_Process+0x360>)
 8000a74:	f7ff fc7e 	bl	8000374 <LCD_PrintStr>
			   LCD_SetCursor(0, 1);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fc08 	bl	8000290 <LCD_SetCursor>
			   char buffer[16];
			   sprintf(buffer, "So luong: %d", quantity); // Hiển thị số lượng
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	493b      	ldr	r1, [pc, #236]	@ (8000b74 <ARM_Process+0x34c>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fe85 	bl	8004798 <siprintf>
			   LCD_PrintStr(buffer);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fc6e 	bl	8000374 <LCD_PrintStr>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 8000a98:	225a      	movs	r2, #90	@ 0x5a
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4836      	ldr	r0, [pc, #216]	@ (8000b78 <ARM_Process+0x350>)
 8000a9e:	f000 f877 	bl	8000b90 <Set_Servo_Angle>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 135);
 8000aa2:	2287      	movs	r2, #135	@ 0x87
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	4834      	ldr	r0, [pc, #208]	@ (8000b78 <ARM_Process+0x350>)
 8000aa8:	f000 f872 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab0:	f000 fde2 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 90);
 8000ab4:	225a      	movs	r2, #90	@ 0x5a
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	482f      	ldr	r0, [pc, #188]	@ (8000b78 <ARM_Process+0x350>)
 8000aba:	f000 f869 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac2:	f000 fdd9 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 115);
 8000ac6:	2273      	movs	r2, #115	@ 0x73
 8000ac8:	2108      	movs	r1, #8
 8000aca:	482b      	ldr	r0, [pc, #172]	@ (8000b78 <ARM_Process+0x350>)
 8000acc:	f000 f860 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad4:	f000 fdd0 	bl	8001678 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2108      	movs	r1, #8
 8000adc:	4827      	ldr	r0, [pc, #156]	@ (8000b7c <ARM_Process+0x354>)
 8000ade:	f001 f94a 	bl	8001d76 <HAL_GPIO_WritePin>
			   HAL_Delay(5000);
 8000ae2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ae6:	f000 fdc7 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2104      	movs	r1, #4
 8000aee:	4822      	ldr	r0, [pc, #136]	@ (8000b78 <ARM_Process+0x350>)
 8000af0:	f000 f84e 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000af4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af8:	f000 fdbe 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 8000afc:	225a      	movs	r2, #90	@ 0x5a
 8000afe:	2108      	movs	r1, #8
 8000b00:	481d      	ldr	r0, [pc, #116]	@ (8000b78 <ARM_Process+0x350>)
 8000b02:	f000 f845 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000b06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0a:	f000 fdb5 	bl	8001678 <HAL_Delay>
			   Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	4819      	ldr	r0, [pc, #100]	@ (8000b78 <ARM_Process+0x350>)
 8000b14:	f000 f83c 	bl	8000b90 <Set_Servo_Angle>
			   HAL_Delay(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b1c:	f000 fdac 	bl	8001678 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2108      	movs	r1, #8
 8000b24:	4815      	ldr	r0, [pc, #84]	@ (8000b7c <ARM_Process+0x354>)
 8000b26:	f001 f926 	bl	8001d76 <HAL_GPIO_WritePin>
			   HAL_Delay(2000);
 8000b2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b2e:	f000 fda3 	bl	8001678 <HAL_Delay>
			   LCD_Clear();
 8000b32:	f7ff fb97 	bl	8000264 <LCD_Clear>
			   HAL_Delay(20);
 8000b36:	2014      	movs	r0, #20
 8000b38:	f000 fd9e 	bl	8001678 <HAL_Delay>
			   LCD_SetCursor(0, 0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fba6 	bl	8000290 <LCD_SetCursor>
			   LCD_PrintStr("Thanh cong");
 8000b44:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <ARM_Process+0x358>)
 8000b46:	f7ff fc15 	bl	8000374 <LCD_PrintStr>
			   HAL_Delay(1000);
 8000b4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4e:	f000 fd93 	bl	8001678 <HAL_Delay>
		   for(int i=quantity;i>0;i--){
 8000b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b54:	3b01      	subs	r3, #1
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	dc80      	bgt.n	8000a60 <ARM_Process+0x238>
		   }
	            // Gọi hàm di chuyển tay robot kiểu C
	            break;
 8000b5e:	bf00      	nop
	    }
	UART_Send("Process Finished");
 8000b60:	480a      	ldr	r0, [pc, #40]	@ (8000b8c <ARM_Process+0x364>)
 8000b62:	f7ff fe09 	bl	8000778 <UART_Send>
	}
 8000b66:	bf00      	nop
 8000b68:	3748      	adds	r7, #72	@ 0x48
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08005a94 	.word	0x08005a94
 8000b74:	08005aa4 	.word	0x08005aa4
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	08005ab4 	.word	0x08005ab4
 8000b84:	08005ac0 	.word	0x08005ac0
 8000b88:	08005ad0 	.word	0x08005ad0
 8000b8c:	08005ae0 	.word	0x08005ae0

08000b90 <Set_Servo_Angle>:
void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle) {
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	71fb      	strb	r3, [r7, #7]
    // Độ rộng xung từ 1ms đến 2ms tương ứng với góc từ 0 đến 180
    uint16_t pulse = (uint16_t)(1000 + (angle * 1000) / 180); // Tính pulse từ góc
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ba4:	fb02 f303 	mul.w	r3, r2, r3
 8000ba8:	4a15      	ldr	r2, [pc, #84]	@ (8000c00 <Set_Servo_Angle+0x70>)
 8000baa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bae:	441a      	add	r2, r3
 8000bb0:	11d2      	asrs	r2, r2, #7
 8000bb2:	17db      	asrs	r3, r3, #31
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bbc:	82fb      	strh	r3, [r7, #22]

    // Cập nhật độ rộng xung cho kênh PWM
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <Set_Servo_Angle+0x3e>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	8afa      	ldrh	r2, [r7, #22]
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000bcc:	e013      	b.n	8000bf6 <Set_Servo_Angle+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d104      	bne.n	8000bde <Set_Servo_Angle+0x4e>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
 8000bda:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000bdc:	e00b      	b.n	8000bf6 <Set_Servo_Angle+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d104      	bne.n	8000bee <Set_Servo_Angle+0x5e>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	8afb      	ldrh	r3, [r7, #22]
 8000bea:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000bec:	e003      	b.n	8000bf6 <Set_Servo_Angle+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	8afb      	ldrh	r3, [r7, #22]
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bf6:	bf00      	nop
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	b60b60b7 	.word	0xb60b60b7

08000c04 <HAL_UART_RxCpltCallback>:
// Hàm ngắt nhận từng ký tự UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <HAL_UART_RxCpltCallback+0x60>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d121      	bne.n	8000c5a <HAL_UART_RxCpltCallback+0x56>
    {
        if (rxChar == '\n')  // Khi nhận đủ một chuỗi (kết thúc bằng '\n')
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_UART_RxCpltCallback+0x64>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d109      	bne.n	8000c32 <HAL_UART_RxCpltCallback+0x2e>
        {
            rxBuffer[rxIndex] = '\0';  // Đánh dấu kết thúc chuỗi
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <HAL_UART_RxCpltCallback+0x68>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_UART_RxCpltCallback+0x6c>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	5499      	strb	r1, [r3, r2]
            dataReady = 1;  // Đánh dấu dữ liệu đã sẵn sàng
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_UART_RxCpltCallback+0x70>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e011      	b.n	8000c56 <HAL_UART_RxCpltCallback+0x52>
        }
        else
        {
            rxBuffer[rxIndex++] = rxChar;  // Lưu ký tự vào buffer
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_UART_RxCpltCallback+0x68>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	b2d1      	uxtb	r1, r2
 8000c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <HAL_UART_RxCpltCallback+0x68>)
 8000c3c:	7011      	strb	r1, [r2, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <HAL_UART_RxCpltCallback+0x64>)
 8000c42:	7819      	ldrb	r1, [r3, #0]
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_UART_RxCpltCallback+0x6c>)
 8000c46:	5499      	strb	r1, [r3, r2]
            if (rxIndex >= sizeof(rxBuffer)) // Tránh tràn bộ nhớ
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_UART_RxCpltCallback+0x68>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b31      	cmp	r3, #49	@ 0x31
 8000c4e:	d902      	bls.n	8000c56 <HAL_UART_RxCpltCallback+0x52>
            {
                rxIndex = 0;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_UART_RxCpltCallback+0x68>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
            }
        }

        // Tiếp tục nhận ký tự tiếp theo
        UART_Receive();
 8000c56:	f7ff fda5 	bl	80007a4 <UART_Receive>
    }
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013800 	.word	0x40013800
 8000c68:	20000254 	.word	0x20000254
 8000c6c:	20000255 	.word	0x20000255
 8000c70:	200001bc 	.word	0x200001bc
 8000c74:	20000256 	.word	0x20000256

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f000 fc99 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f8bb 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f000 fa5b 	bl	8001140 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c8a:	f000 fa2f 	bl	80010ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c8e:	f000 f929 	bl	8000ee4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c92:	f000 f8f9 	bl	8000e88 <MX_I2C1_Init>
  LCD_Init(2);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f7ff fa60 	bl	800015c <LCD_Init>
  LCD_Backlight();
 8000c9c:	f7ff fb80 	bl	80003a0 <LCD_Backlight>
  LCD_Display();
 8000ca0:	f7ff fb28 	bl	80002f4 <LCD_Display>
  MX_TIM3_Init();
 8000ca4:	f000 f9aa 	bl	8000ffc <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4848      	ldr	r0, [pc, #288]	@ (8000dcc <main+0x154>)
 8000cac:	f002 f9d0 	bl	8003050 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4847      	ldr	r0, [pc, #284]	@ (8000dd0 <main+0x158>)
 8000cb4:	f002 f9cc 	bl	8003050 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4845      	ldr	r0, [pc, #276]	@ (8000dd0 <main+0x158>)
 8000cbc:	f002 f9c8 	bl	8003050 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	4843      	ldr	r0, [pc, #268]	@ (8000dd0 <main+0x158>)
 8000cc4:	f002 f9c4 	bl	8003050 <HAL_TIM_PWM_Start>
  UART_Receive();
 8000cc8:	f7ff fd6c 	bl	80007a4 <UART_Receive>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	4840      	ldr	r0, [pc, #256]	@ (8000dd4 <main+0x15c>)
 8000cd2:	f001 f850 	bl	8001d76 <HAL_GPIO_WritePin>
	  Set_Servo_Angle(&htim2, TIM_CHANNEL_2, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2104      	movs	r1, #4
 8000cda:	483d      	ldr	r0, [pc, #244]	@ (8000dd0 <main+0x158>)
 8000cdc:	f7ff ff58 	bl	8000b90 <Set_Servo_Angle>
	 	  HAL_Delay(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce4:	f000 fcc8 	bl	8001678 <HAL_Delay>
	  Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	4838      	ldr	r0, [pc, #224]	@ (8000dd0 <main+0x158>)
 8000cee:	f7ff ff4f 	bl	8000b90 <Set_Servo_Angle>
	 	  HAL_Delay(1000);
 8000cf2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf6:	f000 fcbf 	bl	8001678 <HAL_Delay>
	  Set_Servo_Angle(&htim2, TIM_CHANNEL_3, 90);
 8000cfa:	225a      	movs	r2, #90	@ 0x5a
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4834      	ldr	r0, [pc, #208]	@ (8000dd0 <main+0x158>)
 8000d00:	f7ff ff46 	bl	8000b90 <Set_Servo_Angle>
	  if (dataReady)  // Kiểm tra cờ báo dữ liệu đã sẵn sàng
 8000d04:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <main+0x160>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <main+0xa0>
	  	 {
	  	  ProcessReceivedData();
 8000d0e:	f7ff fd57 	bl	80007c0 <ProcessReceivedData>
	  	  dataReady = 0;  // Reset lại cờ báo
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <main+0x160>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	  	 }
	  if(DHT11_Start())
 8000d18:	f7ff fc3c 	bl	8000594 <DHT11_Start>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d04f      	beq.n	8000dc2 <main+0x14a>
	       {
	         RHI = DHT11_Read(); // Relative humidity integral
 8000d22:	f7ff fcad 	bl	8000680 <DHT11_Read>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <main+0x164>)
 8000d2c:	701a      	strb	r2, [r3, #0]
	         RHD = DHT11_Read(); // Relative humidity decimal
 8000d2e:	f7ff fca7 	bl	8000680 <DHT11_Read>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <main+0x168>)
 8000d38:	701a      	strb	r2, [r3, #0]
	         TCI = DHT11_Read(); // Celsius integral
 8000d3a:	f7ff fca1 	bl	8000680 <DHT11_Read>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <main+0x16c>)
 8000d44:	701a      	strb	r2, [r3, #0]
	         TCD = DHT11_Read(); // Celsius decimal
 8000d46:	f7ff fc9b 	bl	8000680 <DHT11_Read>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <main+0x170>)
 8000d50:	701a      	strb	r2, [r3, #0]
	         SUM = DHT11_Read(); // Check sum
 8000d52:	f7ff fc95 	bl	8000680 <DHT11_Read>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <main+0x174>)
 8000d5c:	701a      	strb	r2, [r3, #0]
	         char snum1[4];
	         char snum2[4];
	         // Cập nhật mã này
	         sprintf(snum1, "%d", TCI); // Chuyển đổi số nguyên TCI thành chuỗi snum1
 8000d5e:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <main+0x16c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4922      	ldr	r1, [pc, #136]	@ (8000df0 <main+0x178>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fd15 	bl	8004798 <siprintf>
	         sprintf(snum2, "%d", RHI); // Chuyển đổi số nguyên RHI thành chuỗi snum2
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <main+0x164>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	463b      	mov	r3, r7
 8000d76:	491e      	ldr	r1, [pc, #120]	@ (8000df0 <main+0x178>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fd0d 	bl	8004798 <siprintf>
	         LCD_Clear();
 8000d7e:	f7ff fa71 	bl	8000264 <LCD_Clear>
	         LCD_Clear(); // Xóa màn hình LCD
 8000d82:	f7ff fa6f 	bl	8000264 <LCD_Clear>
	         LCD_SetCursor(6, 1); // Đặt con trỏ tại dòng 0, cột 0
 8000d86:	2101      	movs	r1, #1
 8000d88:	2006      	movs	r0, #6
 8000d8a:	f7ff fa81 	bl	8000290 <LCD_SetCursor>
	         LCD_PrintStr("T:"); // In ra "Nhiet do:"
 8000d8e:	4819      	ldr	r0, [pc, #100]	@ (8000df4 <main+0x17c>)
 8000d90:	f7ff faf0 	bl	8000374 <LCD_PrintStr>
	         LCD_SetCursor(8, 1); // Đặt con trỏ tại dòng 0, cột 10
 8000d94:	2101      	movs	r1, #1
 8000d96:	2008      	movs	r0, #8
 8000d98:	f7ff fa7a 	bl	8000290 <LCD_SetCursor>
	         LCD_PrintStr(snum1); // In nhiệt độ
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fae8 	bl	8000374 <LCD_PrintStr>
	         LCD_SetCursor(12, 1); // Đặt con trỏ tại dòng 0, cột 0
 8000da4:	2101      	movs	r1, #1
 8000da6:	200c      	movs	r0, #12
 8000da8:	f7ff fa72 	bl	8000290 <LCD_SetCursor>
			 LCD_PrintStr("H:"); // In ra "Nhiet do:"
 8000dac:	4812      	ldr	r0, [pc, #72]	@ (8000df8 <main+0x180>)
 8000dae:	f7ff fae1 	bl	8000374 <LCD_PrintStr>
			 LCD_SetCursor(14, 1); // Đặt con trỏ tại dòng 0, cột 10
 8000db2:	2101      	movs	r1, #1
 8000db4:	200e      	movs	r0, #14
 8000db6:	f7ff fa6b 	bl	8000290 <LCD_SetCursor>
			 LCD_PrintStr(snum1); // In nhiệt độ
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fad9 	bl	8000374 <LCD_PrintStr>

	        }
	  HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc6:	f000 fc57 	bl	8001678 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000dca:	e77f      	b.n	8000ccc <main+0x54>
 8000dcc:	2000012c 	.word	0x2000012c
 8000dd0:	200000e4 	.word	0x200000e4
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	20000256 	.word	0x20000256
 8000ddc:	2000025c 	.word	0x2000025c
 8000de0:	2000025d 	.word	0x2000025d
 8000de4:	2000025e 	.word	0x2000025e
 8000de8:	2000025f 	.word	0x2000025f
 8000dec:	20000260 	.word	0x20000260
 8000df0:	08005af4 	.word	0x08005af4
 8000df4:	08005af8 	.word	0x08005af8
 8000df8:	08005afc 	.word	0x08005afc

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	@ 0x40
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	2228      	movs	r2, #40	@ 0x28
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fd14 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2302      	movs	r3, #2
 8000e32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e3a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fc4b 	bl	80026e0 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e50:	f000 f9ce 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 feb8 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e7a:	f000 f9b9 	bl	80011f0 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3740      	adds	r7, #64	@ 0x40
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	@ (8000edc <MX_I2C1_Init+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <MX_I2C1_Init+0x58>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec6:	f000 ff6f 	bl	8001da8 <HAL_I2C_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed0:	f000 f98e 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000090 	.word	0x20000090
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	000186a0 	.word	0x000186a0

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	@ 0x38
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f14:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f1e:	2247      	movs	r2, #71	@ 0x47
 8000f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000f28:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f2a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f3c:	482e      	ldr	r0, [pc, #184]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f3e:	f001 ffdf 	bl	8002f00 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f48:	f000 f952 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4827      	ldr	r0, [pc, #156]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f5a:	f002 f9dd 	bl	8003318 <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f64:	f000 f944 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f68:	4823      	ldr	r0, [pc, #140]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f6a:	f002 f818 	bl	8002f9e <HAL_TIM_PWM_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 f93c 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4619      	mov	r1, r3
 8000f86:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000f88:	f002 fd3e 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f92:	f000 f92d 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	@ 0x60
 8000f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4812      	ldr	r0, [pc, #72]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000fae:	f002 f8f1 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000fb8:	f000 f91a 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000fc4:	f002 f8e6 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000fce:	f000 f90f 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000fda:	f002 f8db 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000fe4:	f000 f904 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fe8:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <MX_TIM2_Init+0x114>)
 8000fea:	f000 f9a7 	bl	800133c <HAL_TIM_MspPostInit>

}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	@ 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000e4 	.word	0x200000e4

08000ffc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	@ 0x38
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 800102e:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <MX_TIM3_Init+0xec>)
 8001030:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 8001034:	2247      	movs	r2, #71	@ 0x47
 8001036:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 8001040:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001044:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001052:	4824      	ldr	r0, [pc, #144]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 8001054:	f001 ff54 	bl	8002f00 <HAL_TIM_Base_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800105e:	f000 f8c7 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001068:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106c:	4619      	mov	r1, r3
 800106e:	481d      	ldr	r0, [pc, #116]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 8001070:	f002 f952 	bl	8003318 <HAL_TIM_ConfigClockSource>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800107a:	f000 f8b9 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800107e:	4819      	ldr	r0, [pc, #100]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 8001080:	f001 ff8d 	bl	8002f9e <HAL_TIM_PWM_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800108a:	f000 f8b1 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4619      	mov	r1, r3
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 800109e:	f002 fcb3 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010a8:	f000 f8a2 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ac:	2360      	movs	r3, #96	@ 0x60
 80010ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80010b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 80010c6:	f002 f865 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010d0:	f000 f88e 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <MX_TIM3_Init+0xe8>)
 80010d6:	f000 f931 	bl	800133c <HAL_TIM_MspPostInit>

}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	@ 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000012c 	.word	0x2000012c
 80010e8:	40000400 	.word	0x40000400

080010ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <MX_USART1_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_USART1_UART_Init+0x4c>)
 8001124:	f002 fcce 	bl	8003ac4 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 f85f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000174 	.word	0x20000174
 800113c:	40013800 	.word	0x40013800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_GPIO_Init+0xa4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2108      	movs	r1, #8
 80011a0:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <MX_GPIO_Init+0xa8>)
 80011a2:	f000 fde8 	bl	8001d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a6:	2308      	movs	r3, #8
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <MX_GPIO_Init+0xa8>)
 80011be:	f000 fc3f 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_GPIO_Init+0xac>)
 80011d8:	f000 fc32 	bl	8001a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <Error_Handler+0x8>

080011fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <HAL_MspInit+0x5c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_MspInit+0x5c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_MspInit+0x60>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_MspInit+0x60>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_I2C_MspInit+0x70>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d123      	bne.n	80012c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001298:	23c0      	movs	r3, #192	@ 0xc0
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <HAL_I2C_MspInit+0x78>)
 80012ac:	f000 fbc8 	bl	8001a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 80012b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ba:	61d3      	str	r3, [r2, #28]
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ec:	d10c      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_TIM_Base_MspInit+0x58>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <HAL_TIM_Base_MspInit+0x58>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_TIM_Base_MspInit+0x58>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001306:	e010      	b.n	800132a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10b      	bne.n	800132a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_TIM_Base_MspInit+0x58>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_TIM_Base_MspInit+0x58>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_TIM_Base_MspInit+0x58>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40000400 	.word	0x40000400

0800133c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800135a:	d118      	bne.n	800138e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001374:	2307      	movs	r3, #7
 8001376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2302      	movs	r3, #2
 800137e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <HAL_TIM_MspPostInit+0x98>)
 8001388:	f000 fb5a 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800138c:	e01c      	b.n	80013c8 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <HAL_TIM_MspPostInit+0x9c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d117      	bne.n	80013c8 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b0:	2340      	movs	r3, #64	@ 0x40
 80013b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <HAL_TIM_MspPostInit+0x98>)
 80013c4:	f000 fb3c 	bl	8001a40 <HAL_GPIO_Init>
}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010800 	.word	0x40010800
 80013d8:	40000400 	.word	0x40000400

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a20      	ldr	r2, [pc, #128]	@ (8001478 <HAL_UART_MspInit+0x9c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d139      	bne.n	8001470 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_UART_MspInit+0xa0>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <HAL_UART_MspInit+0xa0>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_UART_MspInit+0xa0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_UART_MspInit+0xa0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a18      	ldr	r2, [pc, #96]	@ (800147c <HAL_UART_MspInit+0xa0>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_UART_MspInit+0xa0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	@ (8001480 <HAL_UART_MspInit+0xa4>)
 8001442:	f000 fafd 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800144a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	4809      	ldr	r0, [pc, #36]	@ (8001480 <HAL_UART_MspInit+0xa4>)
 800145c:	f000 faf0 	bl	8001a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2101      	movs	r1, #1
 8001464:	2025      	movs	r0, #37	@ 0x25
 8001466:	f000 fa02 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146a:	2025      	movs	r0, #37	@ 0x25
 800146c:	f000 fa1b 	bl	80018a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013800 	.word	0x40013800
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <NMI_Handler+0x4>

0800148c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <MemManage_Handler+0x4>

0800149c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <UsageFault_Handler+0x4>

080014ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f8b4 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <USART1_IRQHandler+0x10>)
 80014e2:	f002 fbef 	bl	8003cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000174 	.word	0x20000174

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f003 f992 	bl	8004848 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20005000 	.word	0x20005000
 8001550:	00000400 	.word	0x00000400
 8001554:	2000026c 	.word	0x2000026c
 8001558:	200003c0 	.word	0x200003c0

0800155c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001568:	f7ff fff8 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480b      	ldr	r0, [pc, #44]	@ (800159c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800156e:	490c      	ldr	r1, [pc, #48]	@ (80015a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001570:	4a0c      	ldr	r2, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001584:	4c09      	ldr	r4, [pc, #36]	@ (80015ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f003 f95f 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001596:	f7ff fb6f 	bl	8000c78 <main>
  bx lr
 800159a:	4770      	bx	lr
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015a4:	08005c98 	.word	0x08005c98
  ldr r2, =_sbss
 80015a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015ac:	200003bc 	.word	0x200003bc

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <HAL_Init+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <HAL_Init+0x28>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f947 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fe14 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f95f 	bl	80018c2 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f927 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	@ (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000010 	.word	0x20000010
 8001638:	20000018 	.word	0x20000018
 800163c:	20000014 	.word	0x20000014

08001640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_IncTick+0x1c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x20>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a03      	ldr	r2, [pc, #12]	@ (8001660 <HAL_IncTick+0x20>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000018 	.word	0x20000018
 8001660:	20000270 	.word	0x20000270

08001664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b02      	ldr	r3, [pc, #8]	@ (8001674 <HAL_GetTick+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000270 	.word	0x20000270

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fff0 	bl	8001664 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffe0 	bl	8001664 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000018 	.word	0x20000018

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4906      	ldr	r1, [pc, #24]	@ (8001758 <__NVIC_EnableIRQ+0x34>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	@ (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	@ 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff90 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff2d 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff42 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff90 	bl	80017b0 <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5f 	bl	800175c <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff35 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa2 	bl	8001814 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e020      	b.n	8001946 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d005      	beq.n	8001974 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e051      	b.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 020e 	bic.w	r2, r2, #14
 8001982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a22      	ldr	r2, [pc, #136]	@ (8001a24 <HAL_DMA_Abort_IT+0xd4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d029      	beq.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <HAL_DMA_Abort_IT+0xd8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_Abort_IT+0x9e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1f      	ldr	r2, [pc, #124]	@ (8001a2c <HAL_DMA_Abort_IT+0xdc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01a      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x98>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a30 <HAL_DMA_Abort_IT+0xe0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d012      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x92>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <HAL_DMA_Abort_IT+0xe4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00a      	beq.n	80019dc <HAL_DMA_Abort_IT+0x8c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001a38 <HAL_DMA_Abort_IT+0xe8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d102      	bne.n	80019d6 <HAL_DMA_Abort_IT+0x86>
 80019d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019d4:	e00e      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019da:	e00b      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e0:	e008      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e6:	e005      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ec:	e002      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019ee:	2310      	movs	r3, #16
 80019f0:	e000      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019f2:	2301      	movs	r3, #1
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_DMA_Abort_IT+0xec>)
 80019f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    } 
  }
  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020008 	.word	0x40020008
 8001a28:	4002001c 	.word	0x4002001c
 8001a2c:	40020030 	.word	0x40020030
 8001a30:	40020044 	.word	0x40020044
 8001a34:	40020058 	.word	0x40020058
 8001a38:	4002006c 	.word	0x4002006c
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b08b      	sub	sp, #44	@ 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e169      	b.n	8001d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a54:	2201      	movs	r2, #1
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8158 	bne.w	8001d22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a9a      	ldr	r2, [pc, #616]	@ (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d05e      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a7c:	4a98      	ldr	r2, [pc, #608]	@ (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d875      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a82:	4a98      	ldr	r2, [pc, #608]	@ (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d058      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a88:	4a96      	ldr	r2, [pc, #600]	@ (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d86f      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a8e:	4a96      	ldr	r2, [pc, #600]	@ (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d052      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a94:	4a94      	ldr	r2, [pc, #592]	@ (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d869      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a9a:	4a94      	ldr	r2, [pc, #592]	@ (8001cec <HAL_GPIO_Init+0x2ac>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04c      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aa0:	4a92      	ldr	r2, [pc, #584]	@ (8001cec <HAL_GPIO_Init+0x2ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d863      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aa6:	4a92      	ldr	r2, [pc, #584]	@ (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d046      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aac:	4a90      	ldr	r2, [pc, #576]	@ (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d85d      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d82a      	bhi.n	8001b0c <HAL_GPIO_Init+0xcc>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d859      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aba:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <HAL_GPIO_Init+0x80>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001b3b 	.word	0x08001b3b
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b27 	.word	0x08001b27
 8001acc:	08001b69 	.word	0x08001b69
 8001ad0:	08001b6f 	.word	0x08001b6f
 8001ad4:	08001b6f 	.word	0x08001b6f
 8001ad8:	08001b6f 	.word	0x08001b6f
 8001adc:	08001b6f 	.word	0x08001b6f
 8001ae0:	08001b6f 	.word	0x08001b6f
 8001ae4:	08001b6f 	.word	0x08001b6f
 8001ae8:	08001b6f 	.word	0x08001b6f
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001b6f 	.word	0x08001b6f
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b6f 	.word	0x08001b6f
 8001afc:	08001b6f 	.word	0x08001b6f
 8001b00:	08001b6f 	.word	0x08001b6f
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b31 	.word	0x08001b31
 8001b0c:	4a79      	ldr	r2, [pc, #484]	@ (8001cf4 <HAL_GPIO_Init+0x2b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b12:	e02c      	b.n	8001b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e029      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	3304      	adds	r3, #4
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e024      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e01f      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	330c      	adds	r3, #12
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e01a      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e013      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]
          break;
 8001b5a:	e009      	b.n	8001b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	615a      	str	r2, [r3, #20]
          break;
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          break;
 8001b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	@ 0xff
 8001b74:	d801      	bhi.n	8001b7a <HAL_GPIO_Init+0x13a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_Init+0x13e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	@ 0xff
 8001b84:	d802      	bhi.n	8001b8c <HAL_GPIO_Init+0x14c>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x152>
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	210f      	movs	r1, #15
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80b1 	beq.w	8001d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd8:	4a48      	ldr	r2, [pc, #288]	@ (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	@ (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d013      	beq.n	8001c2c <HAL_GPIO_Init+0x1ec>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3f      	ldr	r2, [pc, #252]	@ (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00d      	beq.n	8001c28 <HAL_GPIO_Init+0x1e8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3d      	ldr	r2, [pc, #244]	@ (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_GPIO_Init+0x1e0>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3e:	492f      	ldr	r1, [pc, #188]	@ (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c58:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	492c      	ldr	r1, [pc, #176]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4928      	ldr	r1, [pc, #160]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4922      	ldr	r1, [pc, #136]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8e:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	491e      	ldr	r1, [pc, #120]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4918      	ldr	r1, [pc, #96]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4914      	ldr	r1, [pc, #80]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	490e      	ldr	r1, [pc, #56]	@ (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e021      	b.n	8001d22 <HAL_GPIO_Init+0x2e2>
 8001cde:	bf00      	nop
 8001ce0:	10320000 	.word	0x10320000
 8001ce4:	10310000 	.word	0x10310000
 8001ce8:	10220000 	.word	0x10220000
 8001cec:	10210000 	.word	0x10210000
 8001cf0:	10120000 	.word	0x10120000
 8001cf4:	10110000 	.word	0x10110000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_GPIO_Init+0x304>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4909      	ldr	r1, [pc, #36]	@ (8001d44 <HAL_GPIO_Init+0x304>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f47f ae8e 	bne.w	8001a54 <HAL_GPIO_Init+0x14>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	372c      	adds	r7, #44	@ 0x2c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	807b      	strh	r3, [r7, #2]
 8001d82:	4613      	mov	r3, r2
 8001d84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d86:	787b      	ldrb	r3, [r7, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8c:	887a      	ldrh	r2, [r7, #2]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d92:	e003      	b.n	8001d9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	041a      	lsls	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e12b      	b.n	8002012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fa46 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	@ 0x24
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e0c:	f001 f832 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a81      	ldr	r2, [pc, #516]	@ (800201c <HAL_I2C_Init+0x274>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d807      	bhi.n	8001e2c <HAL_I2C_Init+0x84>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a80      	ldr	r2, [pc, #512]	@ (8002020 <HAL_I2C_Init+0x278>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e006      	b.n	8001e3a <HAL_I2C_Init+0x92>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8002024 <HAL_I2C_Init+0x27c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0e7      	b.n	8002012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a78      	ldr	r2, [pc, #480]	@ (8002028 <HAL_I2C_Init+0x280>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0c9b      	lsrs	r3, r3, #18
 8001e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	@ (800201c <HAL_I2C_Init+0x274>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d802      	bhi.n	8001e7c <HAL_I2C_Init+0xd4>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	e009      	b.n	8001e90 <HAL_I2C_Init+0xe8>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a69      	ldr	r2, [pc, #420]	@ (800202c <HAL_I2C_Init+0x284>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	3301      	adds	r3, #1
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ea2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	495c      	ldr	r1, [pc, #368]	@ (800201c <HAL_I2C_Init+0x274>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d819      	bhi.n	8001ee4 <HAL_I2C_Init+0x13c>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_I2C_Init+0x138>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e59      	subs	r1, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	e051      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	e04f      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d111      	bne.n	8001f10 <HAL_I2C_Init+0x168>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e012      	b.n	8001f36 <HAL_I2C_Init+0x18e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1e58      	subs	r0, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	0099      	lsls	r1, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Init+0x196>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e022      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10e      	bne.n	8001f64 <HAL_I2C_Init+0x1bc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e58      	subs	r0, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	440b      	add	r3, r1
 8001f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f62:	e00f      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	0099      	lsls	r1, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	6809      	ldr	r1, [r1, #0]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6911      	ldr	r1, [r2, #16]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68d2      	ldr	r2, [r2, #12]
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	000186a0 	.word	0x000186a0
 8002020:	001e847f 	.word	0x001e847f
 8002024:	003d08ff 	.word	0x003d08ff
 8002028:	431bde83 	.word	0x431bde83
 800202c:	10624dd3 	.word	0x10624dd3

08002030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	461a      	mov	r2, r3
 800203c:	460b      	mov	r3, r1
 800203e:	817b      	strh	r3, [r7, #10]
 8002040:	4613      	mov	r3, r2
 8002042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fb0e 	bl	8001664 <HAL_GetTick>
 8002048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b20      	cmp	r3, #32
 8002054:	f040 80e0 	bne.w	8002218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2319      	movs	r3, #25
 800205e:	2201      	movs	r2, #1
 8002060:	4970      	ldr	r1, [pc, #448]	@ (8002224 <HAL_I2C_Master_Transmit+0x1f4>)
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f964 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	e0d3      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_I2C_Master_Transmit+0x50>
 800207c:	2302      	movs	r3, #2
 800207e:	e0cc      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d007      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2221      	movs	r2, #33	@ 0x21
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2210      	movs	r2, #16
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	893a      	ldrh	r2, [r7, #8]
 80020d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a50      	ldr	r2, [pc, #320]	@ (8002228 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	6a3a      	ldr	r2, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f89c 	bl	800222c <I2C_MasterRequestWrite>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e08d      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002114:	e066      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	6a39      	ldr	r1, [r7, #32]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fa22 	bl	8002564 <I2C_WaitOnTXEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	2b04      	cmp	r3, #4
 800212c:	d107      	bne.n	800213e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06b      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x188>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d017      	beq.n	80021b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	6a39      	ldr	r1, [r7, #32]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fa19 	bl	80025f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d107      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e01a      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d194      	bne.n	8002116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	00100002 	.word	0x00100002
 8002228:	ffff0000 	.word	0xffff0000

0800222c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d006      	beq.n	8002256 <I2C_MasterRequestWrite+0x2a>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d003      	beq.n	8002256 <I2C_MasterRequestWrite+0x2a>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002254:	d108      	bne.n	8002268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e00b      	b.n	8002280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	2b12      	cmp	r3, #18
 800226e:	d107      	bne.n	8002280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800227e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f84f 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a6:	d103      	bne.n	80022b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e035      	b.n	8002320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022bc:	d108      	bne.n	80022d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022cc:	611a      	str	r2, [r3, #16]
 80022ce:	e01b      	b.n	8002308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	11db      	asrs	r3, r3, #7
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 0306 	and.w	r3, r3, #6
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f063 030f 	orn	r3, r3, #15
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	490e      	ldr	r1, [pc, #56]	@ (8002328 <I2C_MasterRequestWrite+0xfc>)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f898 	bl	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e010      	b.n	8002320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022fe:	897b      	ldrh	r3, [r7, #10]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4907      	ldr	r1, [pc, #28]	@ (800232c <I2C_MasterRequestWrite+0x100>)
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f888 	bl	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	00010008 	.word	0x00010008
 800232c:	00010002 	.word	0x00010002

08002330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	e048      	b.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d044      	beq.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff f98b 	bl	8001664 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d139      	bne.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	43da      	mvns	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	e00c      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	43da      	mvns	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d116      	bne.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e023      	b.n	800241c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10d      	bne.n	80023fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4013      	ands	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	e00c      	b.n	8002414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	43da      	mvns	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	429a      	cmp	r2, r3
 8002418:	d093      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002432:	e071      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002442:	d123      	bne.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800245c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f043 0204 	orr.w	r2, r3, #4
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e067      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d041      	beq.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7ff f8e6 	bl	8001664 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d136      	bne.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d10c      	bne.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4013      	ands	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	e00b      	b.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	43da      	mvns	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4013      	ands	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e021      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10c      	bne.n	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e00b      	b.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f af6d 	bne.w	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002570:	e034      	b.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f886 	bl	8002684 <I2C_IsAcknowledgeFailed>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e034      	b.n	80025ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d028      	beq.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7ff f86b 	bl	8001664 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11d      	bne.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025aa:	2b80      	cmp	r3, #128	@ 0x80
 80025ac:	d016      	beq.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b80      	cmp	r3, #128	@ 0x80
 80025e8:	d1c3      	bne.n	8002572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002600:	e034      	b.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f83e 	bl	8002684 <I2C_IsAcknowledgeFailed>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e034      	b.n	800267c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d028      	beq.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7ff f823 	bl	8001664 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11d      	bne.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d016      	beq.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e007      	b.n	800267c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d1c3      	bne.n	8002602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269a:	d11b      	bne.n	80026d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f043 0204 	orr.w	r2, r3, #4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e272      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe ff52 	bl	8001664 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe ff4e 	bl	8001664 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe ff3e 	bl	8001664 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe ff3a 	bl	8001664 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fef3 	bl	8001664 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe feef 	bl	8001664 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fed2 	bl	8001664 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe fece 	bl	8001664 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e180      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe feb2 	bl	8001664 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe feae 	bl	8001664 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 face 	bl	8002ec4 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fe98 	bl	8001664 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fe94 	bl	8001664 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e146      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b92      	ldr	r3, [pc, #584]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b88      	ldr	r3, [pc, #544]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a87      	ldr	r2, [pc, #540]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b85      	ldr	r3, [pc, #532]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b82      	ldr	r3, [pc, #520]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fe55 	bl	8001664 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe fe51 	bl	8001664 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	@ 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b75      	ldr	r3, [pc, #468]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a69      	ldr	r2, [pc, #420]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b67      	ldr	r3, [pc, #412]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a60      	ldr	r2, [pc, #384]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b58      	ldr	r3, [pc, #352]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a57      	ldr	r2, [pc, #348]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fe05 	bl	8001664 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fe01 	bl	8001664 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fdef 	bl	8001664 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fdeb 	bl	8001664 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b40      	ldr	r3, [pc, #256]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fdbf 	bl	8001664 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fdbb 	bl	8001664 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e06d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4921      	ldr	r1, [pc, #132]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	491b      	ldr	r1, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fd8f 	bl	8001664 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fd8b 	bl	8001664 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e035      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd78 	bl	8001664 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fd74 	bl	8001664 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e01e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e019      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fcc6 	bl	8001664 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fe fcc2 	bl	8001664 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	@ (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	@ (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fc24 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08005b0c 	.word	0x08005b0c
 8002db0:	20000010 	.word	0x20000010
 8002db4:	20000014 	.word	0x20000014

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dea:	613b      	str	r3, [r7, #16]
      break;
 8002dec:	e027      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	613b      	str	r3, [r7, #16]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	693b      	ldr	r3, [r7, #16]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	08005b24 	.word	0x08005b24
 8002e58:	08005b34 	.word	0x08005b34
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b02      	ldr	r3, [pc, #8]	@ (8002e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000010 	.word	0x20000010

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff2 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08005b1c 	.word	0x08005b1c

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4903      	ldr	r1, [pc, #12]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08005b1c 	.word	0x08005b1c

08002ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <RCC_Delay+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <RCC_Delay+0x38>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee0:	bf00      	nop
  }
  while (Delay --);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	60fa      	str	r2, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <RCC_Delay+0x1c>
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000010 	.word	0x20000010
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e041      	b.n	8002f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f9d8 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fab2 	bl	80034a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e041      	b.n	8003034 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f839 	bl	800303c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 fa63 	bl	80034a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
	...

08003050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_TIM_PWM_Start+0x24>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e022      	b.n	80030ba <HAL_TIM_PWM_Start+0x6a>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d109      	bne.n	800308e <HAL_TIM_PWM_Start+0x3e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e015      	b.n	80030ba <HAL_TIM_PWM_Start+0x6a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d109      	bne.n	80030a8 <HAL_TIM_PWM_Start+0x58>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e008      	b.n	80030ba <HAL_TIM_PWM_Start+0x6a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e05e      	b.n	8003180 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_PWM_Start+0x82>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d0:	e013      	b.n	80030fa <HAL_TIM_PWM_Start+0xaa>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x92>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e0:	e00b      	b.n	80030fa <HAL_TIM_PWM_Start+0xaa>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_PWM_Start+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f0:	e003      	b.n	80030fa <HAL_TIM_PWM_Start+0xaa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2201      	movs	r2, #1
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fc5c 	bl	80039c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <HAL_TIM_PWM_Start+0x138>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d107      	bne.n	8003122 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a18      	ldr	r2, [pc, #96]	@ (8003188 <HAL_TIM_PWM_Start+0x138>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_TIM_PWM_Start+0xfa>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003134:	d009      	beq.n	800314a <HAL_TIM_PWM_Start+0xfa>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a14      	ldr	r2, [pc, #80]	@ (800318c <HAL_TIM_PWM_Start+0x13c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIM_PWM_Start+0xfa>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <HAL_TIM_PWM_Start+0x140>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d111      	bne.n	800316e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d010      	beq.n	800317e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316c:	e007      	b.n	800317e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800

08003194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0ae      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	f200 809f 	bhi.w	8003300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031c2:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	08003301 	.word	0x08003301
 80031d0:	08003301 	.word	0x08003301
 80031d4:	08003301 	.word	0x08003301
 80031d8:	0800323d 	.word	0x0800323d
 80031dc:	08003301 	.word	0x08003301
 80031e0:	08003301 	.word	0x08003301
 80031e4:	08003301 	.word	0x08003301
 80031e8:	0800327f 	.word	0x0800327f
 80031ec:	08003301 	.word	0x08003301
 80031f0:	08003301 	.word	0x08003301
 80031f4:	08003301 	.word	0x08003301
 80031f8:	080032bf 	.word	0x080032bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f9be 	bl	8003584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0208 	orr.w	r2, r2, #8
 8003216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	619a      	str	r2, [r3, #24]
      break;
 800323a:	e064      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fa04 	bl	8003650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	021a      	lsls	r2, r3, #8
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	619a      	str	r2, [r3, #24]
      break;
 800327c:	e043      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fa4d 	bl	8003724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0208 	orr.w	r2, r2, #8
 8003298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0204 	bic.w	r2, r2, #4
 80032a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69d9      	ldr	r1, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
      break;
 80032bc:	e023      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fa97 	bl	80037f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	61da      	str	r2, [r3, #28]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
      break;
 8003304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIM_ConfigClockSource+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e0b4      	b.n	800349e <HAL_TIM_ConfigClockSource+0x186>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800335a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336c:	d03e      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xd4>
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003372:	f200 8087 	bhi.w	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	f000 8086 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x172>
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003382:	d87f      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b70      	cmp	r3, #112	@ 0x70
 8003386:	d01a      	beq.n	80033be <HAL_TIM_ConfigClockSource+0xa6>
 8003388:	2b70      	cmp	r3, #112	@ 0x70
 800338a:	d87b      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b60      	cmp	r3, #96	@ 0x60
 800338e:	d050      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x11a>
 8003390:	2b60      	cmp	r3, #96	@ 0x60
 8003392:	d877      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b50      	cmp	r3, #80	@ 0x50
 8003396:	d03c      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0xfa>
 8003398:	2b50      	cmp	r3, #80	@ 0x50
 800339a:	d873      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d058      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x13a>
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d86f      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b30      	cmp	r3, #48	@ 0x30
 80033a6:	d064      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	2b30      	cmp	r3, #48	@ 0x30
 80033aa:	d86b      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d060      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d867      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05c      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d05a      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	e062      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ce:	f000 fad8 	bl	8003982 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	609a      	str	r2, [r3, #8]
      break;
 80033ea:	e04f      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	f000 fac1 	bl	8003982 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800340e:	609a      	str	r2, [r3, #8]
      break;
 8003410:	e03c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	461a      	mov	r2, r3
 8003420:	f000 fa38 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2150      	movs	r1, #80	@ 0x50
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa8f 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003430:	e02c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800343e:	461a      	mov	r2, r3
 8003440:	f000 fa56 	bl	80038f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2160      	movs	r1, #96	@ 0x60
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fa7f 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003450:	e01c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	461a      	mov	r2, r3
 8003460:	f000 fa18 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2140      	movs	r1, #64	@ 0x40
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa6f 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003470:	e00c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 fa66 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 8003482:	e003      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e000      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800348a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003578 <TIM_Base_SetConfig+0xd0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00b      	beq.n	80034d8 <TIM_Base_SetConfig+0x30>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0x30>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <TIM_Base_SetConfig+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x30>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <TIM_Base_SetConfig+0xd8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d108      	bne.n	80034ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a22      	ldr	r2, [pc, #136]	@ (8003578 <TIM_Base_SetConfig+0xd0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_Base_SetConfig+0x62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d007      	beq.n	800350a <TIM_Base_SetConfig+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	@ (800357c <TIM_Base_SetConfig+0xd4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_Base_SetConfig+0x62>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <TIM_Base_SetConfig+0xd8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <TIM_Base_SetConfig+0xd0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d103      	bne.n	8003550 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]
  }
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800

08003584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 0201 	bic.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 0302 	bic.w	r3, r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a1c      	ldr	r2, [pc, #112]	@ (800364c <TIM_OC1_SetConfig+0xc8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d10c      	bne.n	80035fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0308 	bic.w	r3, r3, #8
 80035e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a13      	ldr	r2, [pc, #76]	@ (800364c <TIM_OC1_SetConfig+0xc8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d111      	bne.n	8003626 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	621a      	str	r2, [r3, #32]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40012c00 	.word	0x40012c00

08003650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f023 0210 	bic.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0320 	bic.w	r3, r3, #32
 800369a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <TIM_OC2_SetConfig+0xd0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10d      	bne.n	80036cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a14      	ldr	r2, [pc, #80]	@ (8003720 <TIM_OC2_SetConfig+0xd0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d113      	bne.n	80036fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	40012c00 	.word	0x40012c00

08003724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800376c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1d      	ldr	r2, [pc, #116]	@ (80037f4 <TIM_OC3_SetConfig+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10d      	bne.n	800379e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800379c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a14      	ldr	r2, [pc, #80]	@ (80037f4 <TIM_OC3_SetConfig+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d113      	bne.n	80037ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00

080037f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800382e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	031b      	lsls	r3, r3, #12
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0f      	ldr	r2, [pc, #60]	@ (8003890 <TIM_OC4_SetConfig+0x98>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d109      	bne.n	800386c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800385e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	40012c00 	.word	0x40012c00

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0210 	bic.w	r2, r3, #16
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	031b      	lsls	r3, r3, #12
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800392c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	f043 0307 	orr.w	r3, r3, #7
 8003970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b087      	sub	sp, #28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800399c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2201      	movs	r2, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e046      	b.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a16      	ldr	r2, [pc, #88]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10c      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e042      	b.n	8003b5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fc76 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	@ 0x24
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fdb7 	bl	800467c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	@ 0x28
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d175      	bne.n	8003c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_UART_Transmit+0x2c>
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e06e      	b.n	8003c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2221      	movs	r2, #33	@ 0x21
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fd5f 	bl	8001664 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	88fa      	ldrh	r2, [r7, #6]
 8003bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bbc:	d108      	bne.n	8003bd0 <HAL_UART_Transmit+0x6c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	e003      	b.n	8003bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bd8:	e02e      	b.n	8003c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fb1c 	bl	8004222 <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e03a      	b.n	8003c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	3302      	adds	r3, #2
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	e007      	b.n	8003c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	781a      	ldrb	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3301      	adds	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1cb      	bne.n	8003bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2140      	movs	r1, #64	@ 0x40
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fae8 	bl	8004222 <UART_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e006      	b.n	8003c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e000      	b.n	8003c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d112      	bne.n	8003cba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UART_Receive_IT+0x26>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e00b      	b.n	8003cbc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	461a      	mov	r2, r3
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fb0f 	bl	80042d4 <UART_Start_Receive_IT>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	e000      	b.n	8003cbc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_UART_IRQHandler+0x66>
 8003d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fbec 	bl	8004500 <UART_Receive_IT>
      return;
 8003d28:	e25b      	b.n	80041e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80de 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x22c>
 8003d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80d1 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_UART_IRQHandler+0xae>
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_UART_IRQHandler+0xd2>
 8003d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_UART_IRQHandler+0xf6>
 8003da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	f043 0204 	orr.w	r2, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d011      	beq.n	8003dea <HAL_UART_IRQHandler+0x126>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	f043 0208 	orr.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 81f2 	beq.w	80041d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_UART_IRQHandler+0x14e>
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fb77 	bl	8004500 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d103      	bne.n	8003e3e <HAL_UART_IRQHandler+0x17a>
 8003e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04f      	beq.n	8003ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa81 	bl	8004346 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d041      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1d9      	bne.n	8003e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80040a4 <HAL_UART_IRQHandler+0x3e0>)
 8003eac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd fd4c 	bl	8001950 <HAL_DMA_Abort_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00e      	b.n	8003eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f993 	bl	80041fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e00a      	b.n	8003eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f98f 	bl	80041fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	e006      	b.n	8003eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f98b 	bl	80041fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003eea:	e175      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	bf00      	nop
    return;
 8003eee:	e173      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	f040 814f 	bne.w	8004198 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8148 	beq.w	8004198 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8141 	beq.w	8004198 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80b6 	beq.w	80040a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8145 	beq.w	80041dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	f080 813e 	bcs.w	80041dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f000 8088 	beq.w	8004084 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fa0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1d9      	bne.n	8003f74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fe4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e1      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800400c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800400e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004020:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004022:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004026:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800402e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e3      	bne.n	8003ffc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	330c      	adds	r3, #12
 8004048:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004054:	f023 0310 	bic.w	r3, r3, #16
 8004058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004066:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004068:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800406c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e3      	bne.n	8004042 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd fc2b 	bl	80018da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004092:	b29b      	uxth	r3, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	b29b      	uxth	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8b6 	bl	800420c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a0:	e09c      	b.n	80041dc <HAL_UART_IRQHandler+0x518>
 80040a2:	bf00      	nop
 80040a4:	0800440b 	.word	0x0800440b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 808e 	beq.w	80041e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8089 	beq.w	80041e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80040f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e3      	bne.n	80040ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3314      	adds	r3, #20
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	623b      	str	r3, [r7, #32]
   return(result);
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800412a:	633a      	str	r2, [r7, #48]	@ 0x30
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e3      	bne.n	8004106 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60fb      	str	r3, [r7, #12]
   return(result);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0310 	bic.w	r3, r3, #16
 8004162:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004170:	61fa      	str	r2, [r7, #28]
 8004172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	69b9      	ldr	r1, [r7, #24]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	617b      	str	r3, [r7, #20]
   return(result);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e3      	bne.n	800414c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800418a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f83b 	bl	800420c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004196:	e023      	b.n	80041e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_UART_IRQHandler+0x4f4>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f93e 	bl	8004432 <UART_Transmit_IT>
    return;
 80041b6:	e014      	b.n	80041e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <HAL_UART_IRQHandler+0x51e>
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f97d 	bl	80044d0 <UART_EndTransmit_IT>
    return;
 80041d6:	e004      	b.n	80041e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80041d8:	bf00      	nop
 80041da:	e002      	b.n	80041e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041e0:	bf00      	nop
  }
}
 80041e2:	37e8      	adds	r7, #232	@ 0xe8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004232:	e03b      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d037      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423c:	f7fd fa12 	bl	8001664 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	429a      	cmp	r2, r3
 800424a:	d302      	bcc.n	8004252 <UART_WaitOnFlagUntilTimeout+0x30>
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e03a      	b.n	80042cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d023      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d020      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b40      	cmp	r3, #64	@ 0x40
 800426e:	d01d      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b08      	cmp	r3, #8
 800427c:	d116      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f856 	bl	8004346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2208      	movs	r2, #8
 800429e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e00f      	b.n	80042cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d0b4      	beq.n	8004234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2222      	movs	r2, #34	@ 0x22
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004318:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0220 	orr.w	r2, r2, #32
 8004338:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004346:	b480      	push	{r7}
 8004348:	b095      	sub	sp, #84	@ 0x54
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800436e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3314      	adds	r3, #20
 8004388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	61fb      	str	r3, [r7, #28]
   return(result);
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d119      	bne.n	80043f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f023 0310 	bic.w	r3, r3, #16
 80043d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043de:	61ba      	str	r2, [r7, #24]
 80043e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	613b      	str	r3, [r7, #16]
   return(result);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004400:	bf00      	nop
 8004402:	3754      	adds	r7, #84	@ 0x54
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fee8 	bl	80041fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b21      	cmp	r3, #33	@ 0x21
 8004444:	d13e      	bne.n	80044c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	d114      	bne.n	800447a <UART_Transmit_IT+0x48>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d110      	bne.n	800447a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	621a      	str	r2, [r3, #32]
 8004478:	e008      	b.n	800448c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6211      	str	r1, [r2, #32]
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29b      	uxth	r3, r3
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10f      	bne.n	80044c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e000      	b.n	80044c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff fe79 	bl	80041e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	@ 0x30
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b22      	cmp	r3, #34	@ 0x22
 8004512:	f040 80ae 	bne.w	8004672 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800451e:	d117      	bne.n	8004550 <UART_Receive_IT+0x50>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453e:	b29a      	uxth	r2, r3
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
 800454e:	e026      	b.n	800459e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d007      	beq.n	8004574 <UART_Receive_IT+0x74>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <UART_Receive_IT+0x82>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e008      	b.n	8004594 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800458e:	b2da      	uxtb	r2, r3
 8004590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004592:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4619      	mov	r1, r3
 80045ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d15d      	bne.n	800466e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0220 	bic.w	r2, r2, #32
 80045c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d135      	bne.n	8004664 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	613b      	str	r3, [r7, #16]
   return(result);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f023 0310 	bic.w	r3, r3, #16
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461e:	623a      	str	r2, [r7, #32]
 8004620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	69f9      	ldr	r1, [r7, #28]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	61bb      	str	r3, [r7, #24]
   return(result);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e5      	bne.n	80045fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b10      	cmp	r3, #16
 800463e:	d10a      	bne.n	8004656 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fdd5 	bl	800420c <HAL_UARTEx_RxEventCallback>
 8004662:	e002      	b.n	800466a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fc facd 	bl	8000c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e002      	b.n	8004674 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3730      	adds	r7, #48	@ 0x30
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80046b6:	f023 030c 	bic.w	r3, r3, #12
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2c      	ldr	r2, [pc, #176]	@ (8004790 <UART_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046e4:	f7fe fbda 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	e002      	b.n	80046f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fbc2 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	4a22      	ldr	r2, [pc, #136]	@ (8004794 <UART_SetConfig+0x118>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	0119      	lsls	r1, r3, #4
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009a      	lsls	r2, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	fbb2 f2f3 	udiv	r2, r2, r3
 8004728:	4b1a      	ldr	r3, [pc, #104]	@ (8004794 <UART_SetConfig+0x118>)
 800472a:	fba3 0302 	umull	r0, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2064      	movs	r0, #100	@ 0x64
 8004732:	fb00 f303 	mul.w	r3, r0, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	3332      	adds	r3, #50	@ 0x32
 800473c:	4a15      	ldr	r2, [pc, #84]	@ (8004794 <UART_SetConfig+0x118>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004748:	4419      	add	r1, r3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009a      	lsls	r2, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <UART_SetConfig+0x118>)
 8004762:	fba3 0302 	umull	r0, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2064      	movs	r0, #100	@ 0x64
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	@ 0x32
 8004774:	4a07      	ldr	r2, [pc, #28]	@ (8004794 <UART_SetConfig+0x118>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 020f 	and.w	r2, r3, #15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	440a      	add	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40013800 	.word	0x40013800
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <siprintf>:
 8004798:	b40e      	push	{r1, r2, r3}
 800479a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800479e:	b510      	push	{r4, lr}
 80047a0:	2400      	movs	r4, #0
 80047a2:	b09d      	sub	sp, #116	@ 0x74
 80047a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80047a6:	9002      	str	r0, [sp, #8]
 80047a8:	9006      	str	r0, [sp, #24]
 80047aa:	9107      	str	r1, [sp, #28]
 80047ac:	9104      	str	r1, [sp, #16]
 80047ae:	4809      	ldr	r0, [pc, #36]	@ (80047d4 <siprintf+0x3c>)
 80047b0:	4909      	ldr	r1, [pc, #36]	@ (80047d8 <siprintf+0x40>)
 80047b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b6:	9105      	str	r1, [sp, #20]
 80047b8:	6800      	ldr	r0, [r0, #0]
 80047ba:	a902      	add	r1, sp, #8
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80047c0:	f000 f9c0 	bl	8004b44 <_svfiprintf_r>
 80047c4:	9b02      	ldr	r3, [sp, #8]
 80047c6:	701c      	strb	r4, [r3, #0]
 80047c8:	b01d      	add	sp, #116	@ 0x74
 80047ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ce:	b003      	add	sp, #12
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000001c 	.word	0x2000001c
 80047d8:	ffff0208 	.word	0xffff0208

080047dc <siscanf>:
 80047dc:	b40e      	push	{r1, r2, r3}
 80047de:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	2500      	movs	r5, #0
 80047e6:	b09d      	sub	sp, #116	@ 0x74
 80047e8:	ac21      	add	r4, sp, #132	@ 0x84
 80047ea:	f854 6b04 	ldr.w	r6, [r4], #4
 80047ee:	f8ad 2014 	strh.w	r2, [sp, #20]
 80047f2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80047f4:	9002      	str	r0, [sp, #8]
 80047f6:	9006      	str	r0, [sp, #24]
 80047f8:	f7fb fca8 	bl	800014c <strlen>
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <siscanf+0x50>)
 80047fe:	9003      	str	r0, [sp, #12]
 8004800:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004806:	9007      	str	r0, [sp, #28]
 8004808:	4809      	ldr	r0, [pc, #36]	@ (8004830 <siscanf+0x54>)
 800480a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800480e:	4632      	mov	r2, r6
 8004810:	4623      	mov	r3, r4
 8004812:	a902      	add	r1, sp, #8
 8004814:	6800      	ldr	r0, [r0, #0]
 8004816:	950f      	str	r5, [sp, #60]	@ 0x3c
 8004818:	9514      	str	r5, [sp, #80]	@ 0x50
 800481a:	9401      	str	r4, [sp, #4]
 800481c:	f000 fae8 	bl	8004df0 <__ssvfiscanf_r>
 8004820:	b01d      	add	sp, #116	@ 0x74
 8004822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004826:	b003      	add	sp, #12
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	08004835 	.word	0x08004835
 8004830:	2000001c 	.word	0x2000001c

08004834 <__seofread>:
 8004834:	2000      	movs	r0, #0
 8004836:	4770      	bx	lr

08004838 <memset>:
 8004838:	4603      	mov	r3, r0
 800483a:	4402      	add	r2, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <__errno>:
 8004848:	4b01      	ldr	r3, [pc, #4]	@ (8004850 <__errno+0x8>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	2000001c 	.word	0x2000001c

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	2600      	movs	r6, #0
 8004858:	4d0c      	ldr	r5, [pc, #48]	@ (800488c <__libc_init_array+0x38>)
 800485a:	4c0d      	ldr	r4, [pc, #52]	@ (8004890 <__libc_init_array+0x3c>)
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	f001 f8ee 	bl	8005a44 <_init>
 8004868:	2600      	movs	r6, #0
 800486a:	4d0a      	ldr	r5, [pc, #40]	@ (8004894 <__libc_init_array+0x40>)
 800486c:	4c0a      	ldr	r4, [pc, #40]	@ (8004898 <__libc_init_array+0x44>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	08005c90 	.word	0x08005c90
 8004890:	08005c90 	.word	0x08005c90
 8004894:	08005c90 	.word	0x08005c90
 8004898:	08005c94 	.word	0x08005c94

0800489c <__retarget_lock_acquire_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_release_recursive>:
 800489e:	4770      	bx	lr

080048a0 <_free_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d040      	beq.n	800492a <_free_r+0x8a>
 80048a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ac:	1f0c      	subs	r4, r1, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfb8      	it	lt
 80048b2:	18e4      	addlt	r4, r4, r3
 80048b4:	f000 f8de 	bl	8004a74 <__malloc_lock>
 80048b8:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <_free_r+0x8c>)
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	b933      	cbnz	r3, 80048cc <_free_r+0x2c>
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	6014      	str	r4, [r2, #0]
 80048c2:	4628      	mov	r0, r5
 80048c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c8:	f000 b8da 	b.w	8004a80 <__malloc_unlock>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d908      	bls.n	80048e2 <_free_r+0x42>
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	1821      	adds	r1, r4, r0
 80048d4:	428b      	cmp	r3, r1
 80048d6:	bf01      	itttt	eq
 80048d8:	6819      	ldreq	r1, [r3, #0]
 80048da:	685b      	ldreq	r3, [r3, #4]
 80048dc:	1809      	addeq	r1, r1, r0
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	e7ed      	b.n	80048be <_free_r+0x1e>
 80048e2:	461a      	mov	r2, r3
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b10b      	cbz	r3, 80048ec <_free_r+0x4c>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d9fa      	bls.n	80048e2 <_free_r+0x42>
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	1850      	adds	r0, r2, r1
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d10b      	bne.n	800490c <_free_r+0x6c>
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	4401      	add	r1, r0
 80048f8:	1850      	adds	r0, r2, r1
 80048fa:	4283      	cmp	r3, r0
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	d1e0      	bne.n	80048c2 <_free_r+0x22>
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4408      	add	r0, r1
 8004906:	6010      	str	r0, [r2, #0]
 8004908:	6053      	str	r3, [r2, #4]
 800490a:	e7da      	b.n	80048c2 <_free_r+0x22>
 800490c:	d902      	bls.n	8004914 <_free_r+0x74>
 800490e:	230c      	movs	r3, #12
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	e7d6      	b.n	80048c2 <_free_r+0x22>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	1821      	adds	r1, r4, r0
 8004918:	428b      	cmp	r3, r1
 800491a:	bf01      	itttt	eq
 800491c:	6819      	ldreq	r1, [r3, #0]
 800491e:	685b      	ldreq	r3, [r3, #4]
 8004920:	1809      	addeq	r1, r1, r0
 8004922:	6021      	streq	r1, [r4, #0]
 8004924:	6063      	str	r3, [r4, #4]
 8004926:	6054      	str	r4, [r2, #4]
 8004928:	e7cb      	b.n	80048c2 <_free_r+0x22>
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	200003b8 	.word	0x200003b8

08004930 <sbrk_aligned>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4e0f      	ldr	r6, [pc, #60]	@ (8004970 <sbrk_aligned+0x40>)
 8004934:	460c      	mov	r4, r1
 8004936:	6831      	ldr	r1, [r6, #0]
 8004938:	4605      	mov	r5, r0
 800493a:	b911      	cbnz	r1, 8004942 <sbrk_aligned+0x12>
 800493c:	f000 ff34 	bl	80057a8 <_sbrk_r>
 8004940:	6030      	str	r0, [r6, #0]
 8004942:	4621      	mov	r1, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 ff2f 	bl	80057a8 <_sbrk_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d103      	bne.n	8004956 <sbrk_aligned+0x26>
 800494e:	f04f 34ff 	mov.w	r4, #4294967295
 8004952:	4620      	mov	r0, r4
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	1cc4      	adds	r4, r0, #3
 8004958:	f024 0403 	bic.w	r4, r4, #3
 800495c:	42a0      	cmp	r0, r4
 800495e:	d0f8      	beq.n	8004952 <sbrk_aligned+0x22>
 8004960:	1a21      	subs	r1, r4, r0
 8004962:	4628      	mov	r0, r5
 8004964:	f000 ff20 	bl	80057a8 <_sbrk_r>
 8004968:	3001      	adds	r0, #1
 800496a:	d1f2      	bne.n	8004952 <sbrk_aligned+0x22>
 800496c:	e7ef      	b.n	800494e <sbrk_aligned+0x1e>
 800496e:	bf00      	nop
 8004970:	200003b4 	.word	0x200003b4

08004974 <_malloc_r>:
 8004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004978:	1ccd      	adds	r5, r1, #3
 800497a:	f025 0503 	bic.w	r5, r5, #3
 800497e:	3508      	adds	r5, #8
 8004980:	2d0c      	cmp	r5, #12
 8004982:	bf38      	it	cc
 8004984:	250c      	movcc	r5, #12
 8004986:	2d00      	cmp	r5, #0
 8004988:	4606      	mov	r6, r0
 800498a:	db01      	blt.n	8004990 <_malloc_r+0x1c>
 800498c:	42a9      	cmp	r1, r5
 800498e:	d904      	bls.n	800499a <_malloc_r+0x26>
 8004990:	230c      	movs	r3, #12
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800499a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a70 <_malloc_r+0xfc>
 800499e:	f000 f869 	bl	8004a74 <__malloc_lock>
 80049a2:	f8d8 3000 	ldr.w	r3, [r8]
 80049a6:	461c      	mov	r4, r3
 80049a8:	bb44      	cbnz	r4, 80049fc <_malloc_r+0x88>
 80049aa:	4629      	mov	r1, r5
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ffbf 	bl	8004930 <sbrk_aligned>
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	4604      	mov	r4, r0
 80049b6:	d158      	bne.n	8004a6a <_malloc_r+0xf6>
 80049b8:	f8d8 4000 	ldr.w	r4, [r8]
 80049bc:	4627      	mov	r7, r4
 80049be:	2f00      	cmp	r7, #0
 80049c0:	d143      	bne.n	8004a4a <_malloc_r+0xd6>
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	d04b      	beq.n	8004a5e <_malloc_r+0xea>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	4639      	mov	r1, r7
 80049ca:	4630      	mov	r0, r6
 80049cc:	eb04 0903 	add.w	r9, r4, r3
 80049d0:	f000 feea 	bl	80057a8 <_sbrk_r>
 80049d4:	4581      	cmp	r9, r0
 80049d6:	d142      	bne.n	8004a5e <_malloc_r+0xea>
 80049d8:	6821      	ldr	r1, [r4, #0]
 80049da:	4630      	mov	r0, r6
 80049dc:	1a6d      	subs	r5, r5, r1
 80049de:	4629      	mov	r1, r5
 80049e0:	f7ff ffa6 	bl	8004930 <sbrk_aligned>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d03a      	beq.n	8004a5e <_malloc_r+0xea>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	442b      	add	r3, r5
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	f8d8 3000 	ldr.w	r3, [r8]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	bb62      	cbnz	r2, 8004a50 <_malloc_r+0xdc>
 80049f6:	f8c8 7000 	str.w	r7, [r8]
 80049fa:	e00f      	b.n	8004a1c <_malloc_r+0xa8>
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	1b52      	subs	r2, r2, r5
 8004a00:	d420      	bmi.n	8004a44 <_malloc_r+0xd0>
 8004a02:	2a0b      	cmp	r2, #11
 8004a04:	d917      	bls.n	8004a36 <_malloc_r+0xc2>
 8004a06:	1961      	adds	r1, r4, r5
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	6025      	str	r5, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	6059      	strne	r1, [r3, #4]
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	bf08      	it	eq
 8004a14:	f8c8 1000 	streq.w	r1, [r8]
 8004a18:	5162      	str	r2, [r4, r5]
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 f82f 	bl	8004a80 <__malloc_unlock>
 8004a22:	f104 000b 	add.w	r0, r4, #11
 8004a26:	1d23      	adds	r3, r4, #4
 8004a28:	f020 0007 	bic.w	r0, r0, #7
 8004a2c:	1ac2      	subs	r2, r0, r3
 8004a2e:	bf1c      	itt	ne
 8004a30:	1a1b      	subne	r3, r3, r0
 8004a32:	50a3      	strne	r3, [r4, r2]
 8004a34:	e7af      	b.n	8004996 <_malloc_r+0x22>
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	bf0c      	ite	eq
 8004a3c:	f8c8 2000 	streq.w	r2, [r8]
 8004a40:	605a      	strne	r2, [r3, #4]
 8004a42:	e7eb      	b.n	8004a1c <_malloc_r+0xa8>
 8004a44:	4623      	mov	r3, r4
 8004a46:	6864      	ldr	r4, [r4, #4]
 8004a48:	e7ae      	b.n	80049a8 <_malloc_r+0x34>
 8004a4a:	463c      	mov	r4, r7
 8004a4c:	687f      	ldr	r7, [r7, #4]
 8004a4e:	e7b6      	b.n	80049be <_malloc_r+0x4a>
 8004a50:	461a      	mov	r2, r3
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d1fb      	bne.n	8004a50 <_malloc_r+0xdc>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6053      	str	r3, [r2, #4]
 8004a5c:	e7de      	b.n	8004a1c <_malloc_r+0xa8>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	4630      	mov	r0, r6
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	f000 f80c 	bl	8004a80 <__malloc_unlock>
 8004a68:	e794      	b.n	8004994 <_malloc_r+0x20>
 8004a6a:	6005      	str	r5, [r0, #0]
 8004a6c:	e7d6      	b.n	8004a1c <_malloc_r+0xa8>
 8004a6e:	bf00      	nop
 8004a70:	200003b8 	.word	0x200003b8

08004a74 <__malloc_lock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	@ (8004a7c <__malloc_lock+0x8>)
 8004a76:	f7ff bf11 	b.w	800489c <__retarget_lock_acquire_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	200003b0 	.word	0x200003b0

08004a80 <__malloc_unlock>:
 8004a80:	4801      	ldr	r0, [pc, #4]	@ (8004a88 <__malloc_unlock+0x8>)
 8004a82:	f7ff bf0c 	b.w	800489e <__retarget_lock_release_recursive>
 8004a86:	bf00      	nop
 8004a88:	200003b0 	.word	0x200003b0

08004a8c <__ssputs_r>:
 8004a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	461f      	mov	r7, r3
 8004a92:	688e      	ldr	r6, [r1, #8]
 8004a94:	4682      	mov	sl, r0
 8004a96:	42be      	cmp	r6, r7
 8004a98:	460c      	mov	r4, r1
 8004a9a:	4690      	mov	r8, r2
 8004a9c:	680b      	ldr	r3, [r1, #0]
 8004a9e:	d82d      	bhi.n	8004afc <__ssputs_r+0x70>
 8004aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004aa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004aa8:	d026      	beq.n	8004af8 <__ssputs_r+0x6c>
 8004aaa:	6965      	ldr	r5, [r4, #20]
 8004aac:	6909      	ldr	r1, [r1, #16]
 8004aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ab2:	eba3 0901 	sub.w	r9, r3, r1
 8004ab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aba:	1c7b      	adds	r3, r7, #1
 8004abc:	444b      	add	r3, r9
 8004abe:	106d      	asrs	r5, r5, #1
 8004ac0:	429d      	cmp	r5, r3
 8004ac2:	bf38      	it	cc
 8004ac4:	461d      	movcc	r5, r3
 8004ac6:	0553      	lsls	r3, r2, #21
 8004ac8:	d527      	bpl.n	8004b1a <__ssputs_r+0x8e>
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7ff ff52 	bl	8004974 <_malloc_r>
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	b360      	cbz	r0, 8004b2e <__ssputs_r+0xa2>
 8004ad4:	464a      	mov	r2, r9
 8004ad6:	6921      	ldr	r1, [r4, #16]
 8004ad8:	f000 fe84 	bl	80057e4 <memcpy>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	6126      	str	r6, [r4, #16]
 8004aea:	444e      	add	r6, r9
 8004aec:	6026      	str	r6, [r4, #0]
 8004aee:	463e      	mov	r6, r7
 8004af0:	6165      	str	r5, [r4, #20]
 8004af2:	eba5 0509 	sub.w	r5, r5, r9
 8004af6:	60a5      	str	r5, [r4, #8]
 8004af8:	42be      	cmp	r6, r7
 8004afa:	d900      	bls.n	8004afe <__ssputs_r+0x72>
 8004afc:	463e      	mov	r6, r7
 8004afe:	4632      	mov	r2, r6
 8004b00:	4641      	mov	r1, r8
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	f000 fe35 	bl	8005772 <memmove>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	68a3      	ldr	r3, [r4, #8]
 8004b0c:	1b9b      	subs	r3, r3, r6
 8004b0e:	60a3      	str	r3, [r4, #8]
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	4433      	add	r3, r6
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	f000 fe70 	bl	8005800 <_realloc_r>
 8004b20:	4606      	mov	r6, r0
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d1e0      	bne.n	8004ae8 <__ssputs_r+0x5c>
 8004b26:	4650      	mov	r0, sl
 8004b28:	6921      	ldr	r1, [r4, #16]
 8004b2a:	f7ff feb9 	bl	80048a0 <_free_r>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	f8ca 3000 	str.w	r3, [sl]
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	e7e9      	b.n	8004b16 <__ssputs_r+0x8a>
	...

08004b44 <_svfiprintf_r>:
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	4698      	mov	r8, r3
 8004b4a:	898b      	ldrh	r3, [r1, #12]
 8004b4c:	4607      	mov	r7, r0
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	460d      	mov	r5, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	b09d      	sub	sp, #116	@ 0x74
 8004b56:	d510      	bpl.n	8004b7a <_svfiprintf_r+0x36>
 8004b58:	690b      	ldr	r3, [r1, #16]
 8004b5a:	b973      	cbnz	r3, 8004b7a <_svfiprintf_r+0x36>
 8004b5c:	2140      	movs	r1, #64	@ 0x40
 8004b5e:	f7ff ff09 	bl	8004974 <_malloc_r>
 8004b62:	6028      	str	r0, [r5, #0]
 8004b64:	6128      	str	r0, [r5, #16]
 8004b66:	b930      	cbnz	r0, 8004b76 <_svfiprintf_r+0x32>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	b01d      	add	sp, #116	@ 0x74
 8004b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b76:	2340      	movs	r3, #64	@ 0x40
 8004b78:	616b      	str	r3, [r5, #20]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7e:	2320      	movs	r3, #32
 8004b80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b84:	2330      	movs	r3, #48	@ 0x30
 8004b86:	f04f 0901 	mov.w	r9, #1
 8004b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d28 <_svfiprintf_r+0x1e4>
 8004b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b96:	4623      	mov	r3, r4
 8004b98:	469a      	mov	sl, r3
 8004b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b9e:	b10a      	cbz	r2, 8004ba4 <_svfiprintf_r+0x60>
 8004ba0:	2a25      	cmp	r2, #37	@ 0x25
 8004ba2:	d1f9      	bne.n	8004b98 <_svfiprintf_r+0x54>
 8004ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ba8:	d00b      	beq.n	8004bc2 <_svfiprintf_r+0x7e>
 8004baa:	465b      	mov	r3, fp
 8004bac:	4622      	mov	r2, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	f7ff ff6b 	bl	8004a8c <__ssputs_r>
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f000 80a7 	beq.w	8004d0a <_svfiprintf_r+0x1c6>
 8004bbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bbe:	445a      	add	r2, fp
 8004bc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 809f 	beq.w	8004d0a <_svfiprintf_r+0x1c6>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bd6:	f10a 0a01 	add.w	sl, sl, #1
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	9307      	str	r3, [sp, #28]
 8004bde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004be2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004be4:	4654      	mov	r4, sl
 8004be6:	2205      	movs	r2, #5
 8004be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bec:	484e      	ldr	r0, [pc, #312]	@ (8004d28 <_svfiprintf_r+0x1e4>)
 8004bee:	f000 fdeb 	bl	80057c8 <memchr>
 8004bf2:	9a04      	ldr	r2, [sp, #16]
 8004bf4:	b9d8      	cbnz	r0, 8004c2e <_svfiprintf_r+0xea>
 8004bf6:	06d0      	lsls	r0, r2, #27
 8004bf8:	bf44      	itt	mi
 8004bfa:	2320      	movmi	r3, #32
 8004bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c00:	0711      	lsls	r1, r2, #28
 8004c02:	bf44      	itt	mi
 8004c04:	232b      	movmi	r3, #43	@ 0x2b
 8004c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c10:	d015      	beq.n	8004c3e <_svfiprintf_r+0xfa>
 8004c12:	4654      	mov	r4, sl
 8004c14:	2000      	movs	r0, #0
 8004c16:	f04f 0c0a 	mov.w	ip, #10
 8004c1a:	9a07      	ldr	r2, [sp, #28]
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c22:	3b30      	subs	r3, #48	@ 0x30
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	d94b      	bls.n	8004cc0 <_svfiprintf_r+0x17c>
 8004c28:	b1b0      	cbz	r0, 8004c58 <_svfiprintf_r+0x114>
 8004c2a:	9207      	str	r2, [sp, #28]
 8004c2c:	e014      	b.n	8004c58 <_svfiprintf_r+0x114>
 8004c2e:	eba0 0308 	sub.w	r3, r0, r8
 8004c32:	fa09 f303 	lsl.w	r3, r9, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	46a2      	mov	sl, r4
 8004c3a:	9304      	str	r3, [sp, #16]
 8004c3c:	e7d2      	b.n	8004be4 <_svfiprintf_r+0xa0>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	1d19      	adds	r1, r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	9103      	str	r1, [sp, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfbb      	ittet	lt
 8004c4a:	425b      	neglt	r3, r3
 8004c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c50:	9307      	strge	r3, [sp, #28]
 8004c52:	9307      	strlt	r3, [sp, #28]
 8004c54:	bfb8      	it	lt
 8004c56:	9204      	strlt	r2, [sp, #16]
 8004c58:	7823      	ldrb	r3, [r4, #0]
 8004c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c5c:	d10a      	bne.n	8004c74 <_svfiprintf_r+0x130>
 8004c5e:	7863      	ldrb	r3, [r4, #1]
 8004c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c62:	d132      	bne.n	8004cca <_svfiprintf_r+0x186>
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	3402      	adds	r4, #2
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	9203      	str	r2, [sp, #12]
 8004c6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c72:	9305      	str	r3, [sp, #20]
 8004c74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d2c <_svfiprintf_r+0x1e8>
 8004c78:	2203      	movs	r2, #3
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	7821      	ldrb	r1, [r4, #0]
 8004c7e:	f000 fda3 	bl	80057c8 <memchr>
 8004c82:	b138      	cbz	r0, 8004c94 <_svfiprintf_r+0x150>
 8004c84:	2240      	movs	r2, #64	@ 0x40
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	eba0 000a 	sub.w	r0, r0, sl
 8004c8c:	4082      	lsls	r2, r0
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	3401      	adds	r4, #1
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c98:	2206      	movs	r2, #6
 8004c9a:	4825      	ldr	r0, [pc, #148]	@ (8004d30 <_svfiprintf_r+0x1ec>)
 8004c9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ca0:	f000 fd92 	bl	80057c8 <memchr>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d036      	beq.n	8004d16 <_svfiprintf_r+0x1d2>
 8004ca8:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <_svfiprintf_r+0x1f0>)
 8004caa:	bb1b      	cbnz	r3, 8004cf4 <_svfiprintf_r+0x1b0>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	3307      	adds	r3, #7
 8004cb0:	f023 0307 	bic.w	r3, r3, #7
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	9303      	str	r3, [sp, #12]
 8004cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cba:	4433      	add	r3, r6
 8004cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cbe:	e76a      	b.n	8004b96 <_svfiprintf_r+0x52>
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc8:	e7a8      	b.n	8004c1c <_svfiprintf_r+0xd8>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f04f 0c0a 	mov.w	ip, #10
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	3401      	adds	r4, #1
 8004cd4:	9305      	str	r3, [sp, #20]
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cdc:	3a30      	subs	r2, #48	@ 0x30
 8004cde:	2a09      	cmp	r2, #9
 8004ce0:	d903      	bls.n	8004cea <_svfiprintf_r+0x1a6>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0c6      	beq.n	8004c74 <_svfiprintf_r+0x130>
 8004ce6:	9105      	str	r1, [sp, #20]
 8004ce8:	e7c4      	b.n	8004c74 <_svfiprintf_r+0x130>
 8004cea:	4604      	mov	r4, r0
 8004cec:	2301      	movs	r3, #1
 8004cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf2:	e7f0      	b.n	8004cd6 <_svfiprintf_r+0x192>
 8004cf4:	ab03      	add	r3, sp, #12
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <_svfiprintf_r+0x1f4>)
 8004cfe:	a904      	add	r1, sp, #16
 8004d00:	f3af 8000 	nop.w
 8004d04:	1c42      	adds	r2, r0, #1
 8004d06:	4606      	mov	r6, r0
 8004d08:	d1d6      	bne.n	8004cb8 <_svfiprintf_r+0x174>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	065b      	lsls	r3, r3, #25
 8004d0e:	f53f af2d 	bmi.w	8004b6c <_svfiprintf_r+0x28>
 8004d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d14:	e72c      	b.n	8004b70 <_svfiprintf_r+0x2c>
 8004d16:	ab03      	add	r3, sp, #12
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <_svfiprintf_r+0x1f4>)
 8004d20:	a904      	add	r1, sp, #16
 8004d22:	f000 fa4b 	bl	80051bc <_printf_i>
 8004d26:	e7ed      	b.n	8004d04 <_svfiprintf_r+0x1c0>
 8004d28:	08005b36 	.word	0x08005b36
 8004d2c:	08005b3c 	.word	0x08005b3c
 8004d30:	08005b40 	.word	0x08005b40
 8004d34:	00000000 	.word	0x00000000
 8004d38:	08004a8d 	.word	0x08004a8d

08004d3c <_sungetc_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	1c4b      	adds	r3, r1, #1
 8004d40:	4614      	mov	r4, r2
 8004d42:	d103      	bne.n	8004d4c <_sungetc_r+0x10>
 8004d44:	f04f 35ff 	mov.w	r5, #4294967295
 8004d48:	4628      	mov	r0, r5
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	8993      	ldrh	r3, [r2, #12]
 8004d4e:	b2cd      	uxtb	r5, r1
 8004d50:	f023 0320 	bic.w	r3, r3, #32
 8004d54:	8193      	strh	r3, [r2, #12]
 8004d56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d58:	6852      	ldr	r2, [r2, #4]
 8004d5a:	b18b      	cbz	r3, 8004d80 <_sungetc_r+0x44>
 8004d5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	dd08      	ble.n	8004d74 <_sungetc_r+0x38>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	1e5a      	subs	r2, r3, #1
 8004d66:	6022      	str	r2, [r4, #0]
 8004d68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	6063      	str	r3, [r4, #4]
 8004d72:	e7e9      	b.n	8004d48 <_sungetc_r+0xc>
 8004d74:	4621      	mov	r1, r4
 8004d76:	f000 fcc4 	bl	8005702 <__submore>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d0f1      	beq.n	8004d62 <_sungetc_r+0x26>
 8004d7e:	e7e1      	b.n	8004d44 <_sungetc_r+0x8>
 8004d80:	6921      	ldr	r1, [r4, #16]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	b151      	cbz	r1, 8004d9c <_sungetc_r+0x60>
 8004d86:	4299      	cmp	r1, r3
 8004d88:	d208      	bcs.n	8004d9c <_sungetc_r+0x60>
 8004d8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004d8e:	42a9      	cmp	r1, r5
 8004d90:	d104      	bne.n	8004d9c <_sungetc_r+0x60>
 8004d92:	3b01      	subs	r3, #1
 8004d94:	3201      	adds	r2, #1
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	6062      	str	r2, [r4, #4]
 8004d9a:	e7d5      	b.n	8004d48 <_sungetc_r+0xc>
 8004d9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8004da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004da6:	2303      	movs	r3, #3
 8004da8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004daa:	4623      	mov	r3, r4
 8004dac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	2301      	movs	r3, #1
 8004db4:	e7dc      	b.n	8004d70 <_sungetc_r+0x34>

08004db6 <__ssrefill_r>:
 8004db6:	b510      	push	{r4, lr}
 8004db8:	460c      	mov	r4, r1
 8004dba:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004dbc:	b169      	cbz	r1, 8004dda <__ssrefill_r+0x24>
 8004dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dc2:	4299      	cmp	r1, r3
 8004dc4:	d001      	beq.n	8004dca <__ssrefill_r+0x14>
 8004dc6:	f7ff fd6b 	bl	80048a0 <_free_r>
 8004dca:	2000      	movs	r0, #0
 8004dcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dce:	6360      	str	r0, [r4, #52]	@ 0x34
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	b113      	cbz	r3, 8004dda <__ssrefill_r+0x24>
 8004dd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f043 0320 	orr.w	r3, r3, #32
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	e7f3      	b.n	8004dd8 <__ssrefill_r+0x22>

08004df0 <__ssvfiscanf_r>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	460c      	mov	r4, r1
 8004df6:	2100      	movs	r1, #0
 8004df8:	4606      	mov	r6, r0
 8004dfa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8004dfe:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004e02:	49ab      	ldr	r1, [pc, #684]	@ (80050b0 <__ssvfiscanf_r+0x2c0>)
 8004e04:	f10d 0804 	add.w	r8, sp, #4
 8004e08:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004e0a:	49aa      	ldr	r1, [pc, #680]	@ (80050b4 <__ssvfiscanf_r+0x2c4>)
 8004e0c:	4faa      	ldr	r7, [pc, #680]	@ (80050b8 <__ssvfiscanf_r+0x2c8>)
 8004e0e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004e12:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	f892 9000 	ldrb.w	r9, [r2]
 8004e1a:	f1b9 0f00 	cmp.w	r9, #0
 8004e1e:	f000 8159 	beq.w	80050d4 <__ssvfiscanf_r+0x2e4>
 8004e22:	f817 3009 	ldrb.w	r3, [r7, r9]
 8004e26:	1c55      	adds	r5, r2, #1
 8004e28:	f013 0308 	ands.w	r3, r3, #8
 8004e2c:	d019      	beq.n	8004e62 <__ssvfiscanf_r+0x72>
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dd0f      	ble.n	8004e54 <__ssvfiscanf_r+0x64>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	5cba      	ldrb	r2, [r7, r2]
 8004e3a:	0712      	lsls	r2, r2, #28
 8004e3c:	d401      	bmi.n	8004e42 <__ssvfiscanf_r+0x52>
 8004e3e:	462a      	mov	r2, r5
 8004e40:	e7e9      	b.n	8004e16 <__ssvfiscanf_r+0x26>
 8004e42:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004e44:	3301      	adds	r3, #1
 8004e46:	3201      	adds	r2, #1
 8004e48:	9245      	str	r2, [sp, #276]	@ 0x114
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	3a01      	subs	r2, #1
 8004e50:	6062      	str	r2, [r4, #4]
 8004e52:	e7ec      	b.n	8004e2e <__ssvfiscanf_r+0x3e>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4630      	mov	r0, r6
 8004e58:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004e5a:	4798      	blx	r3
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d0e9      	beq.n	8004e34 <__ssvfiscanf_r+0x44>
 8004e60:	e7ed      	b.n	8004e3e <__ssvfiscanf_r+0x4e>
 8004e62:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8004e66:	f040 8086 	bne.w	8004f76 <__ssvfiscanf_r+0x186>
 8004e6a:	9341      	str	r3, [sp, #260]	@ 0x104
 8004e6c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004e6e:	7853      	ldrb	r3, [r2, #1]
 8004e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e72:	bf04      	itt	eq
 8004e74:	2310      	moveq	r3, #16
 8004e76:	1c95      	addeq	r5, r2, #2
 8004e78:	f04f 020a 	mov.w	r2, #10
 8004e7c:	bf08      	it	eq
 8004e7e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004e80:	46aa      	mov	sl, r5
 8004e82:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004e86:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d91e      	bls.n	8004ecc <__ssvfiscanf_r+0xdc>
 8004e8e:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 80050bc <__ssvfiscanf_r+0x2cc>
 8004e92:	2203      	movs	r2, #3
 8004e94:	4658      	mov	r0, fp
 8004e96:	f000 fc97 	bl	80057c8 <memchr>
 8004e9a:	b138      	cbz	r0, 8004eac <__ssvfiscanf_r+0xbc>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4655      	mov	r5, sl
 8004ea0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ea2:	eba0 000b 	sub.w	r0, r0, fp
 8004ea6:	4083      	lsls	r3, r0
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	9341      	str	r3, [sp, #260]	@ 0x104
 8004eac:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004eb0:	2b78      	cmp	r3, #120	@ 0x78
 8004eb2:	d806      	bhi.n	8004ec2 <__ssvfiscanf_r+0xd2>
 8004eb4:	2b57      	cmp	r3, #87	@ 0x57
 8004eb6:	d810      	bhi.n	8004eda <__ssvfiscanf_r+0xea>
 8004eb8:	2b25      	cmp	r3, #37	@ 0x25
 8004eba:	d05c      	beq.n	8004f76 <__ssvfiscanf_r+0x186>
 8004ebc:	d856      	bhi.n	8004f6c <__ssvfiscanf_r+0x17c>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d074      	beq.n	8004fac <__ssvfiscanf_r+0x1bc>
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	9342      	str	r3, [sp, #264]	@ 0x108
 8004eca:	e087      	b.n	8004fdc <__ssvfiscanf_r+0x1ec>
 8004ecc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004ece:	4655      	mov	r5, sl
 8004ed0:	fb02 1103 	mla	r1, r2, r3, r1
 8004ed4:	3930      	subs	r1, #48	@ 0x30
 8004ed6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004ed8:	e7d2      	b.n	8004e80 <__ssvfiscanf_r+0x90>
 8004eda:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004ede:	2a20      	cmp	r2, #32
 8004ee0:	d8ef      	bhi.n	8004ec2 <__ssvfiscanf_r+0xd2>
 8004ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ee8 <__ssvfiscanf_r+0xf8>)
 8004ee4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ee8:	08004fbb 	.word	0x08004fbb
 8004eec:	08004ec3 	.word	0x08004ec3
 8004ef0:	08004ec3 	.word	0x08004ec3
 8004ef4:	08005015 	.word	0x08005015
 8004ef8:	08004ec3 	.word	0x08004ec3
 8004efc:	08004ec3 	.word	0x08004ec3
 8004f00:	08004ec3 	.word	0x08004ec3
 8004f04:	08004ec3 	.word	0x08004ec3
 8004f08:	08004ec3 	.word	0x08004ec3
 8004f0c:	08004ec3 	.word	0x08004ec3
 8004f10:	08004ec3 	.word	0x08004ec3
 8004f14:	0800502b 	.word	0x0800502b
 8004f18:	08005011 	.word	0x08005011
 8004f1c:	08004f73 	.word	0x08004f73
 8004f20:	08004f73 	.word	0x08004f73
 8004f24:	08004f73 	.word	0x08004f73
 8004f28:	08004ec3 	.word	0x08004ec3
 8004f2c:	08004fcd 	.word	0x08004fcd
 8004f30:	08004ec3 	.word	0x08004ec3
 8004f34:	08004ec3 	.word	0x08004ec3
 8004f38:	08004ec3 	.word	0x08004ec3
 8004f3c:	08004ec3 	.word	0x08004ec3
 8004f40:	0800503b 	.word	0x0800503b
 8004f44:	08004fd5 	.word	0x08004fd5
 8004f48:	08004fb3 	.word	0x08004fb3
 8004f4c:	08004ec3 	.word	0x08004ec3
 8004f50:	08004ec3 	.word	0x08004ec3
 8004f54:	08005037 	.word	0x08005037
 8004f58:	08004ec3 	.word	0x08004ec3
 8004f5c:	08005011 	.word	0x08005011
 8004f60:	08004ec3 	.word	0x08004ec3
 8004f64:	08004ec3 	.word	0x08004ec3
 8004f68:	08004fbb 	.word	0x08004fbb
 8004f6c:	3b45      	subs	r3, #69	@ 0x45
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d8a7      	bhi.n	8004ec2 <__ssvfiscanf_r+0xd2>
 8004f72:	2305      	movs	r3, #5
 8004f74:	e031      	b.n	8004fda <__ssvfiscanf_r+0x1ea>
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	dd0d      	ble.n	8004f98 <__ssvfiscanf_r+0x1a8>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	454a      	cmp	r2, r9
 8004f82:	f040 80a7 	bne.w	80050d4 <__ssvfiscanf_r+0x2e4>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6862      	ldr	r2, [r4, #4]
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	3301      	adds	r3, #1
 8004f92:	6062      	str	r2, [r4, #4]
 8004f94:	9345      	str	r3, [sp, #276]	@ 0x114
 8004f96:	e752      	b.n	8004e3e <__ssvfiscanf_r+0x4e>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004f9e:	4798      	blx	r3
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d0eb      	beq.n	8004f7c <__ssvfiscanf_r+0x18c>
 8004fa4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f040 808c 	bne.w	80050c4 <__ssvfiscanf_r+0x2d4>
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e08c      	b.n	80050cc <__ssvfiscanf_r+0x2dc>
 8004fb2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004fb4:	f042 0220 	orr.w	r2, r2, #32
 8004fb8:	9241      	str	r2, [sp, #260]	@ 0x104
 8004fba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc0:	9241      	str	r2, [sp, #260]	@ 0x104
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004fc6:	9242      	str	r2, [sp, #264]	@ 0x108
 8004fc8:	d902      	bls.n	8004fd0 <__ssvfiscanf_r+0x1e0>
 8004fca:	e005      	b.n	8004fd8 <__ssvfiscanf_r+0x1e8>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9342      	str	r3, [sp, #264]	@ 0x108
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e002      	b.n	8004fda <__ssvfiscanf_r+0x1ea>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	9342      	str	r3, [sp, #264]	@ 0x108
 8004fd8:	2304      	movs	r3, #4
 8004fda:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004fdc:	6863      	ldr	r3, [r4, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	dd39      	ble.n	8005056 <__ssvfiscanf_r+0x266>
 8004fe2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004fe4:	0659      	lsls	r1, r3, #25
 8004fe6:	d404      	bmi.n	8004ff2 <__ssvfiscanf_r+0x202>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	781a      	ldrb	r2, [r3, #0]
 8004fec:	5cba      	ldrb	r2, [r7, r2]
 8004fee:	0712      	lsls	r2, r2, #28
 8004ff0:	d438      	bmi.n	8005064 <__ssvfiscanf_r+0x274>
 8004ff2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	dc47      	bgt.n	8005088 <__ssvfiscanf_r+0x298>
 8004ff8:	466b      	mov	r3, sp
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	a941      	add	r1, sp, #260	@ 0x104
 8005000:	f000 f9fa 	bl	80053f8 <_scanf_chars>
 8005004:	2801      	cmp	r0, #1
 8005006:	d065      	beq.n	80050d4 <__ssvfiscanf_r+0x2e4>
 8005008:	2802      	cmp	r0, #2
 800500a:	f47f af18 	bne.w	8004e3e <__ssvfiscanf_r+0x4e>
 800500e:	e7c9      	b.n	8004fa4 <__ssvfiscanf_r+0x1b4>
 8005010:	220a      	movs	r2, #10
 8005012:	e7d7      	b.n	8004fc4 <__ssvfiscanf_r+0x1d4>
 8005014:	4629      	mov	r1, r5
 8005016:	4640      	mov	r0, r8
 8005018:	f000 fb3a 	bl	8005690 <__sccl>
 800501c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800501e:	4605      	mov	r5, r0
 8005020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005024:	9341      	str	r3, [sp, #260]	@ 0x104
 8005026:	2301      	movs	r3, #1
 8005028:	e7d7      	b.n	8004fda <__ssvfiscanf_r+0x1ea>
 800502a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800502c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005030:	9341      	str	r3, [sp, #260]	@ 0x104
 8005032:	2300      	movs	r3, #0
 8005034:	e7d1      	b.n	8004fda <__ssvfiscanf_r+0x1ea>
 8005036:	2302      	movs	r3, #2
 8005038:	e7cf      	b.n	8004fda <__ssvfiscanf_r+0x1ea>
 800503a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800503c:	06c3      	lsls	r3, r0, #27
 800503e:	f53f aefe 	bmi.w	8004e3e <__ssvfiscanf_r+0x4e>
 8005042:	9b00      	ldr	r3, [sp, #0]
 8005044:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	9100      	str	r1, [sp, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	07c0      	lsls	r0, r0, #31
 800504e:	bf4c      	ite	mi
 8005050:	801a      	strhmi	r2, [r3, #0]
 8005052:	601a      	strpl	r2, [r3, #0]
 8005054:	e6f3      	b.n	8004e3e <__ssvfiscanf_r+0x4e>
 8005056:	4621      	mov	r1, r4
 8005058:	4630      	mov	r0, r6
 800505a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800505c:	4798      	blx	r3
 800505e:	2800      	cmp	r0, #0
 8005060:	d0bf      	beq.n	8004fe2 <__ssvfiscanf_r+0x1f2>
 8005062:	e79f      	b.n	8004fa4 <__ssvfiscanf_r+0x1b4>
 8005064:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005066:	3201      	adds	r2, #1
 8005068:	9245      	str	r2, [sp, #276]	@ 0x114
 800506a:	6862      	ldr	r2, [r4, #4]
 800506c:	3a01      	subs	r2, #1
 800506e:	2a00      	cmp	r2, #0
 8005070:	6062      	str	r2, [r4, #4]
 8005072:	dd02      	ble.n	800507a <__ssvfiscanf_r+0x28a>
 8005074:	3301      	adds	r3, #1
 8005076:	6023      	str	r3, [r4, #0]
 8005078:	e7b6      	b.n	8004fe8 <__ssvfiscanf_r+0x1f8>
 800507a:	4621      	mov	r1, r4
 800507c:	4630      	mov	r0, r6
 800507e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005080:	4798      	blx	r3
 8005082:	2800      	cmp	r0, #0
 8005084:	d0b0      	beq.n	8004fe8 <__ssvfiscanf_r+0x1f8>
 8005086:	e78d      	b.n	8004fa4 <__ssvfiscanf_r+0x1b4>
 8005088:	2b04      	cmp	r3, #4
 800508a:	dc06      	bgt.n	800509a <__ssvfiscanf_r+0x2aa>
 800508c:	466b      	mov	r3, sp
 800508e:	4622      	mov	r2, r4
 8005090:	4630      	mov	r0, r6
 8005092:	a941      	add	r1, sp, #260	@ 0x104
 8005094:	f000 fa0a 	bl	80054ac <_scanf_i>
 8005098:	e7b4      	b.n	8005004 <__ssvfiscanf_r+0x214>
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <__ssvfiscanf_r+0x2d0>)
 800509c:	2b00      	cmp	r3, #0
 800509e:	f43f aece 	beq.w	8004e3e <__ssvfiscanf_r+0x4e>
 80050a2:	466b      	mov	r3, sp
 80050a4:	4622      	mov	r2, r4
 80050a6:	4630      	mov	r0, r6
 80050a8:	a941      	add	r1, sp, #260	@ 0x104
 80050aa:	f3af 8000 	nop.w
 80050ae:	e7a9      	b.n	8005004 <__ssvfiscanf_r+0x214>
 80050b0:	08004d3d 	.word	0x08004d3d
 80050b4:	08004db7 	.word	0x08004db7
 80050b8:	08005b85 	.word	0x08005b85
 80050bc:	08005b3c 	.word	0x08005b3c
 80050c0:	00000000 	.word	0x00000000
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	065b      	lsls	r3, r3, #25
 80050c8:	f53f af70 	bmi.w	8004fac <__ssvfiscanf_r+0x1bc>
 80050cc:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80050d6:	e7f9      	b.n	80050cc <__ssvfiscanf_r+0x2dc>

080050d8 <_printf_common>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	4616      	mov	r6, r2
 80050de:	4698      	mov	r8, r3
 80050e0:	688a      	ldr	r2, [r1, #8]
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	4607      	mov	r7, r0
 80050e6:	4293      	cmp	r3, r2
 80050e8:	bfb8      	it	lt
 80050ea:	4613      	movlt	r3, r2
 80050ec:	6033      	str	r3, [r6, #0]
 80050ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050f2:	460c      	mov	r4, r1
 80050f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050f8:	b10a      	cbz	r2, 80050fe <_printf_common+0x26>
 80050fa:	3301      	adds	r3, #1
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	6833      	ldrmi	r3, [r6, #0]
 8005106:	3302      	addmi	r3, #2
 8005108:	6033      	strmi	r3, [r6, #0]
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	f015 0506 	ands.w	r5, r5, #6
 8005110:	d106      	bne.n	8005120 <_printf_common+0x48>
 8005112:	f104 0a19 	add.w	sl, r4, #25
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	6832      	ldr	r2, [r6, #0]
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	42ab      	cmp	r3, r5
 800511e:	dc2b      	bgt.n	8005178 <_printf_common+0xa0>
 8005120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005124:	6822      	ldr	r2, [r4, #0]
 8005126:	3b00      	subs	r3, #0
 8005128:	bf18      	it	ne
 800512a:	2301      	movne	r3, #1
 800512c:	0692      	lsls	r2, r2, #26
 800512e:	d430      	bmi.n	8005192 <_printf_common+0xba>
 8005130:	4641      	mov	r1, r8
 8005132:	4638      	mov	r0, r7
 8005134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005138:	47c8      	blx	r9
 800513a:	3001      	adds	r0, #1
 800513c:	d023      	beq.n	8005186 <_printf_common+0xae>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	f003 0306 	and.w	r3, r3, #6
 8005146:	2b04      	cmp	r3, #4
 8005148:	bf14      	ite	ne
 800514a:	2500      	movne	r5, #0
 800514c:	6833      	ldreq	r3, [r6, #0]
 800514e:	f04f 0600 	mov.w	r6, #0
 8005152:	bf08      	it	eq
 8005154:	68e5      	ldreq	r5, [r4, #12]
 8005156:	f104 041a 	add.w	r4, r4, #26
 800515a:	bf08      	it	eq
 800515c:	1aed      	subeq	r5, r5, r3
 800515e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005162:	bf08      	it	eq
 8005164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005168:	4293      	cmp	r3, r2
 800516a:	bfc4      	itt	gt
 800516c:	1a9b      	subgt	r3, r3, r2
 800516e:	18ed      	addgt	r5, r5, r3
 8005170:	42b5      	cmp	r5, r6
 8005172:	d11a      	bne.n	80051aa <_printf_common+0xd2>
 8005174:	2000      	movs	r0, #0
 8005176:	e008      	b.n	800518a <_printf_common+0xb2>
 8005178:	2301      	movs	r3, #1
 800517a:	4652      	mov	r2, sl
 800517c:	4641      	mov	r1, r8
 800517e:	4638      	mov	r0, r7
 8005180:	47c8      	blx	r9
 8005182:	3001      	adds	r0, #1
 8005184:	d103      	bne.n	800518e <_printf_common+0xb6>
 8005186:	f04f 30ff 	mov.w	r0, #4294967295
 800518a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518e:	3501      	adds	r5, #1
 8005190:	e7c1      	b.n	8005116 <_printf_common+0x3e>
 8005192:	2030      	movs	r0, #48	@ 0x30
 8005194:	18e1      	adds	r1, r4, r3
 8005196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051a0:	4422      	add	r2, r4
 80051a2:	3302      	adds	r3, #2
 80051a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051a8:	e7c2      	b.n	8005130 <_printf_common+0x58>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4622      	mov	r2, r4
 80051ae:	4641      	mov	r1, r8
 80051b0:	4638      	mov	r0, r7
 80051b2:	47c8      	blx	r9
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0e6      	beq.n	8005186 <_printf_common+0xae>
 80051b8:	3601      	adds	r6, #1
 80051ba:	e7d9      	b.n	8005170 <_printf_common+0x98>

080051bc <_printf_i>:
 80051bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	7e0f      	ldrb	r7, [r1, #24]
 80051c2:	4691      	mov	r9, r2
 80051c4:	2f78      	cmp	r7, #120	@ 0x78
 80051c6:	4680      	mov	r8, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	469a      	mov	sl, r3
 80051cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051d2:	d807      	bhi.n	80051e4 <_printf_i+0x28>
 80051d4:	2f62      	cmp	r7, #98	@ 0x62
 80051d6:	d80a      	bhi.n	80051ee <_printf_i+0x32>
 80051d8:	2f00      	cmp	r7, #0
 80051da:	f000 80d1 	beq.w	8005380 <_printf_i+0x1c4>
 80051de:	2f58      	cmp	r7, #88	@ 0x58
 80051e0:	f000 80b8 	beq.w	8005354 <_printf_i+0x198>
 80051e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051ec:	e03a      	b.n	8005264 <_printf_i+0xa8>
 80051ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051f2:	2b15      	cmp	r3, #21
 80051f4:	d8f6      	bhi.n	80051e4 <_printf_i+0x28>
 80051f6:	a101      	add	r1, pc, #4	@ (adr r1, 80051fc <_printf_i+0x40>)
 80051f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051fc:	08005255 	.word	0x08005255
 8005200:	08005269 	.word	0x08005269
 8005204:	080051e5 	.word	0x080051e5
 8005208:	080051e5 	.word	0x080051e5
 800520c:	080051e5 	.word	0x080051e5
 8005210:	080051e5 	.word	0x080051e5
 8005214:	08005269 	.word	0x08005269
 8005218:	080051e5 	.word	0x080051e5
 800521c:	080051e5 	.word	0x080051e5
 8005220:	080051e5 	.word	0x080051e5
 8005224:	080051e5 	.word	0x080051e5
 8005228:	08005367 	.word	0x08005367
 800522c:	08005293 	.word	0x08005293
 8005230:	08005321 	.word	0x08005321
 8005234:	080051e5 	.word	0x080051e5
 8005238:	080051e5 	.word	0x080051e5
 800523c:	08005389 	.word	0x08005389
 8005240:	080051e5 	.word	0x080051e5
 8005244:	08005293 	.word	0x08005293
 8005248:	080051e5 	.word	0x080051e5
 800524c:	080051e5 	.word	0x080051e5
 8005250:	08005329 	.word	0x08005329
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	1d1a      	adds	r2, r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6032      	str	r2, [r6, #0]
 800525c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005264:	2301      	movs	r3, #1
 8005266:	e09c      	b.n	80053a2 <_printf_i+0x1e6>
 8005268:	6833      	ldr	r3, [r6, #0]
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	1d19      	adds	r1, r3, #4
 800526e:	6031      	str	r1, [r6, #0]
 8005270:	0606      	lsls	r6, r0, #24
 8005272:	d501      	bpl.n	8005278 <_printf_i+0xbc>
 8005274:	681d      	ldr	r5, [r3, #0]
 8005276:	e003      	b.n	8005280 <_printf_i+0xc4>
 8005278:	0645      	lsls	r5, r0, #25
 800527a:	d5fb      	bpl.n	8005274 <_printf_i+0xb8>
 800527c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005280:	2d00      	cmp	r5, #0
 8005282:	da03      	bge.n	800528c <_printf_i+0xd0>
 8005284:	232d      	movs	r3, #45	@ 0x2d
 8005286:	426d      	negs	r5, r5
 8005288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528c:	230a      	movs	r3, #10
 800528e:	4858      	ldr	r0, [pc, #352]	@ (80053f0 <_printf_i+0x234>)
 8005290:	e011      	b.n	80052b6 <_printf_i+0xfa>
 8005292:	6821      	ldr	r1, [r4, #0]
 8005294:	6833      	ldr	r3, [r6, #0]
 8005296:	0608      	lsls	r0, r1, #24
 8005298:	f853 5b04 	ldr.w	r5, [r3], #4
 800529c:	d402      	bmi.n	80052a4 <_printf_i+0xe8>
 800529e:	0649      	lsls	r1, r1, #25
 80052a0:	bf48      	it	mi
 80052a2:	b2ad      	uxthmi	r5, r5
 80052a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	bf14      	ite	ne
 80052aa:	230a      	movne	r3, #10
 80052ac:	2308      	moveq	r3, #8
 80052ae:	4850      	ldr	r0, [pc, #320]	@ (80053f0 <_printf_i+0x234>)
 80052b0:	2100      	movs	r1, #0
 80052b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052b6:	6866      	ldr	r6, [r4, #4]
 80052b8:	2e00      	cmp	r6, #0
 80052ba:	60a6      	str	r6, [r4, #8]
 80052bc:	db05      	blt.n	80052ca <_printf_i+0x10e>
 80052be:	6821      	ldr	r1, [r4, #0]
 80052c0:	432e      	orrs	r6, r5
 80052c2:	f021 0104 	bic.w	r1, r1, #4
 80052c6:	6021      	str	r1, [r4, #0]
 80052c8:	d04b      	beq.n	8005362 <_printf_i+0x1a6>
 80052ca:	4616      	mov	r6, r2
 80052cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80052d0:	fb03 5711 	mls	r7, r3, r1, r5
 80052d4:	5dc7      	ldrb	r7, [r0, r7]
 80052d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052da:	462f      	mov	r7, r5
 80052dc:	42bb      	cmp	r3, r7
 80052de:	460d      	mov	r5, r1
 80052e0:	d9f4      	bls.n	80052cc <_printf_i+0x110>
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d10b      	bne.n	80052fe <_printf_i+0x142>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	07df      	lsls	r7, r3, #31
 80052ea:	d508      	bpl.n	80052fe <_printf_i+0x142>
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	6861      	ldr	r1, [r4, #4]
 80052f0:	4299      	cmp	r1, r3
 80052f2:	bfde      	ittt	le
 80052f4:	2330      	movle	r3, #48	@ 0x30
 80052f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052fe:	1b92      	subs	r2, r2, r6
 8005300:	6122      	str	r2, [r4, #16]
 8005302:	464b      	mov	r3, r9
 8005304:	4621      	mov	r1, r4
 8005306:	4640      	mov	r0, r8
 8005308:	f8cd a000 	str.w	sl, [sp]
 800530c:	aa03      	add	r2, sp, #12
 800530e:	f7ff fee3 	bl	80050d8 <_printf_common>
 8005312:	3001      	adds	r0, #1
 8005314:	d14a      	bne.n	80053ac <_printf_i+0x1f0>
 8005316:	f04f 30ff 	mov.w	r0, #4294967295
 800531a:	b004      	add	sp, #16
 800531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f043 0320 	orr.w	r3, r3, #32
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	2778      	movs	r7, #120	@ 0x78
 800532a:	4832      	ldr	r0, [pc, #200]	@ (80053f4 <_printf_i+0x238>)
 800532c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	6831      	ldr	r1, [r6, #0]
 8005334:	061f      	lsls	r7, r3, #24
 8005336:	f851 5b04 	ldr.w	r5, [r1], #4
 800533a:	d402      	bmi.n	8005342 <_printf_i+0x186>
 800533c:	065f      	lsls	r7, r3, #25
 800533e:	bf48      	it	mi
 8005340:	b2ad      	uxthmi	r5, r5
 8005342:	6031      	str	r1, [r6, #0]
 8005344:	07d9      	lsls	r1, r3, #31
 8005346:	bf44      	itt	mi
 8005348:	f043 0320 	orrmi.w	r3, r3, #32
 800534c:	6023      	strmi	r3, [r4, #0]
 800534e:	b11d      	cbz	r5, 8005358 <_printf_i+0x19c>
 8005350:	2310      	movs	r3, #16
 8005352:	e7ad      	b.n	80052b0 <_printf_i+0xf4>
 8005354:	4826      	ldr	r0, [pc, #152]	@ (80053f0 <_printf_i+0x234>)
 8005356:	e7e9      	b.n	800532c <_printf_i+0x170>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f023 0320 	bic.w	r3, r3, #32
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	e7f6      	b.n	8005350 <_printf_i+0x194>
 8005362:	4616      	mov	r6, r2
 8005364:	e7bd      	b.n	80052e2 <_printf_i+0x126>
 8005366:	6833      	ldr	r3, [r6, #0]
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	1d18      	adds	r0, r3, #4
 800536c:	6961      	ldr	r1, [r4, #20]
 800536e:	6030      	str	r0, [r6, #0]
 8005370:	062e      	lsls	r6, r5, #24
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	d501      	bpl.n	800537a <_printf_i+0x1be>
 8005376:	6019      	str	r1, [r3, #0]
 8005378:	e002      	b.n	8005380 <_printf_i+0x1c4>
 800537a:	0668      	lsls	r0, r5, #25
 800537c:	d5fb      	bpl.n	8005376 <_printf_i+0x1ba>
 800537e:	8019      	strh	r1, [r3, #0]
 8005380:	2300      	movs	r3, #0
 8005382:	4616      	mov	r6, r2
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	e7bc      	b.n	8005302 <_printf_i+0x146>
 8005388:	6833      	ldr	r3, [r6, #0]
 800538a:	2100      	movs	r1, #0
 800538c:	1d1a      	adds	r2, r3, #4
 800538e:	6032      	str	r2, [r6, #0]
 8005390:	681e      	ldr	r6, [r3, #0]
 8005392:	6862      	ldr	r2, [r4, #4]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 fa17 	bl	80057c8 <memchr>
 800539a:	b108      	cbz	r0, 80053a0 <_printf_i+0x1e4>
 800539c:	1b80      	subs	r0, r0, r6
 800539e:	6060      	str	r0, [r4, #4]
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	2300      	movs	r3, #0
 80053a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053aa:	e7aa      	b.n	8005302 <_printf_i+0x146>
 80053ac:	4632      	mov	r2, r6
 80053ae:	4649      	mov	r1, r9
 80053b0:	4640      	mov	r0, r8
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	47d0      	blx	sl
 80053b6:	3001      	adds	r0, #1
 80053b8:	d0ad      	beq.n	8005316 <_printf_i+0x15a>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	079b      	lsls	r3, r3, #30
 80053be:	d413      	bmi.n	80053e8 <_printf_i+0x22c>
 80053c0:	68e0      	ldr	r0, [r4, #12]
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	4298      	cmp	r0, r3
 80053c6:	bfb8      	it	lt
 80053c8:	4618      	movlt	r0, r3
 80053ca:	e7a6      	b.n	800531a <_printf_i+0x15e>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4632      	mov	r2, r6
 80053d0:	4649      	mov	r1, r9
 80053d2:	4640      	mov	r0, r8
 80053d4:	47d0      	blx	sl
 80053d6:	3001      	adds	r0, #1
 80053d8:	d09d      	beq.n	8005316 <_printf_i+0x15a>
 80053da:	3501      	adds	r5, #1
 80053dc:	68e3      	ldr	r3, [r4, #12]
 80053de:	9903      	ldr	r1, [sp, #12]
 80053e0:	1a5b      	subs	r3, r3, r1
 80053e2:	42ab      	cmp	r3, r5
 80053e4:	dcf2      	bgt.n	80053cc <_printf_i+0x210>
 80053e6:	e7eb      	b.n	80053c0 <_printf_i+0x204>
 80053e8:	2500      	movs	r5, #0
 80053ea:	f104 0619 	add.w	r6, r4, #25
 80053ee:	e7f5      	b.n	80053dc <_printf_i+0x220>
 80053f0:	08005b47 	.word	0x08005b47
 80053f4:	08005b58 	.word	0x08005b58

080053f8 <_scanf_chars>:
 80053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053fc:	4615      	mov	r5, r2
 80053fe:	688a      	ldr	r2, [r1, #8]
 8005400:	4680      	mov	r8, r0
 8005402:	460c      	mov	r4, r1
 8005404:	b932      	cbnz	r2, 8005414 <_scanf_chars+0x1c>
 8005406:	698a      	ldr	r2, [r1, #24]
 8005408:	2a00      	cmp	r2, #0
 800540a:	bf14      	ite	ne
 800540c:	f04f 32ff 	movne.w	r2, #4294967295
 8005410:	2201      	moveq	r2, #1
 8005412:	608a      	str	r2, [r1, #8]
 8005414:	2700      	movs	r7, #0
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80054a8 <_scanf_chars+0xb0>
 800541c:	06d1      	lsls	r1, r2, #27
 800541e:	bf5f      	itttt	pl
 8005420:	681a      	ldrpl	r2, [r3, #0]
 8005422:	1d11      	addpl	r1, r2, #4
 8005424:	6019      	strpl	r1, [r3, #0]
 8005426:	6816      	ldrpl	r6, [r2, #0]
 8005428:	69a0      	ldr	r0, [r4, #24]
 800542a:	b188      	cbz	r0, 8005450 <_scanf_chars+0x58>
 800542c:	2801      	cmp	r0, #1
 800542e:	d107      	bne.n	8005440 <_scanf_chars+0x48>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	6963      	ldr	r3, [r4, #20]
 8005436:	5c9b      	ldrb	r3, [r3, r2]
 8005438:	b953      	cbnz	r3, 8005450 <_scanf_chars+0x58>
 800543a:	2f00      	cmp	r7, #0
 800543c:	d031      	beq.n	80054a2 <_scanf_chars+0xaa>
 800543e:	e022      	b.n	8005486 <_scanf_chars+0x8e>
 8005440:	2802      	cmp	r0, #2
 8005442:	d120      	bne.n	8005486 <_scanf_chars+0x8e>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f819 3003 	ldrb.w	r3, [r9, r3]
 800544c:	071b      	lsls	r3, r3, #28
 800544e:	d41a      	bmi.n	8005486 <_scanf_chars+0x8e>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	3701      	adds	r7, #1
 8005454:	06da      	lsls	r2, r3, #27
 8005456:	bf5e      	ittt	pl
 8005458:	682b      	ldrpl	r3, [r5, #0]
 800545a:	781b      	ldrbpl	r3, [r3, #0]
 800545c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005460:	682a      	ldr	r2, [r5, #0]
 8005462:	686b      	ldr	r3, [r5, #4]
 8005464:	3201      	adds	r2, #1
 8005466:	602a      	str	r2, [r5, #0]
 8005468:	68a2      	ldr	r2, [r4, #8]
 800546a:	3b01      	subs	r3, #1
 800546c:	3a01      	subs	r2, #1
 800546e:	606b      	str	r3, [r5, #4]
 8005470:	60a2      	str	r2, [r4, #8]
 8005472:	b142      	cbz	r2, 8005486 <_scanf_chars+0x8e>
 8005474:	2b00      	cmp	r3, #0
 8005476:	dcd7      	bgt.n	8005428 <_scanf_chars+0x30>
 8005478:	4629      	mov	r1, r5
 800547a:	4640      	mov	r0, r8
 800547c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005480:	4798      	blx	r3
 8005482:	2800      	cmp	r0, #0
 8005484:	d0d0      	beq.n	8005428 <_scanf_chars+0x30>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f013 0310 	ands.w	r3, r3, #16
 800548c:	d105      	bne.n	800549a <_scanf_chars+0xa2>
 800548e:	68e2      	ldr	r2, [r4, #12]
 8005490:	3201      	adds	r2, #1
 8005492:	60e2      	str	r2, [r4, #12]
 8005494:	69a2      	ldr	r2, [r4, #24]
 8005496:	b102      	cbz	r2, 800549a <_scanf_chars+0xa2>
 8005498:	7033      	strb	r3, [r6, #0]
 800549a:	2000      	movs	r0, #0
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	443b      	add	r3, r7
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a6:	bf00      	nop
 80054a8:	08005b85 	.word	0x08005b85

080054ac <_scanf_i>:
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	460c      	mov	r4, r1
 80054b2:	4698      	mov	r8, r3
 80054b4:	4b72      	ldr	r3, [pc, #456]	@ (8005680 <_scanf_i+0x1d4>)
 80054b6:	b087      	sub	sp, #28
 80054b8:	4682      	mov	sl, r0
 80054ba:	4616      	mov	r6, r2
 80054bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054c0:	ab03      	add	r3, sp, #12
 80054c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005684 <_scanf_i+0x1d8>)
 80054c8:	69a1      	ldr	r1, [r4, #24]
 80054ca:	4a6f      	ldr	r2, [pc, #444]	@ (8005688 <_scanf_i+0x1dc>)
 80054cc:	4627      	mov	r7, r4
 80054ce:	2903      	cmp	r1, #3
 80054d0:	bf08      	it	eq
 80054d2:	461a      	moveq	r2, r3
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	9201      	str	r2, [sp, #4]
 80054d8:	1e5a      	subs	r2, r3, #1
 80054da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80054de:	bf81      	itttt	hi
 80054e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80054e4:	eb03 0905 	addhi.w	r9, r3, r5
 80054e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80054ec:	60a3      	strhi	r3, [r4, #8]
 80054ee:	f857 3b1c 	ldr.w	r3, [r7], #28
 80054f2:	bf98      	it	ls
 80054f4:	f04f 0900 	movls.w	r9, #0
 80054f8:	463d      	mov	r5, r7
 80054fa:	f04f 0b00 	mov.w	fp, #0
 80054fe:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	6831      	ldr	r1, [r6, #0]
 8005506:	ab03      	add	r3, sp, #12
 8005508:	2202      	movs	r2, #2
 800550a:	7809      	ldrb	r1, [r1, #0]
 800550c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005510:	f000 f95a 	bl	80057c8 <memchr>
 8005514:	b328      	cbz	r0, 8005562 <_scanf_i+0xb6>
 8005516:	f1bb 0f01 	cmp.w	fp, #1
 800551a:	d159      	bne.n	80055d0 <_scanf_i+0x124>
 800551c:	6862      	ldr	r2, [r4, #4]
 800551e:	b92a      	cbnz	r2, 800552c <_scanf_i+0x80>
 8005520:	2108      	movs	r1, #8
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	6061      	str	r1, [r4, #4]
 8005526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800552a:	6022      	str	r2, [r4, #0]
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005532:	6022      	str	r2, [r4, #0]
 8005534:	68a2      	ldr	r2, [r4, #8]
 8005536:	1e51      	subs	r1, r2, #1
 8005538:	60a1      	str	r1, [r4, #8]
 800553a:	b192      	cbz	r2, 8005562 <_scanf_i+0xb6>
 800553c:	6832      	ldr	r2, [r6, #0]
 800553e:	1c51      	adds	r1, r2, #1
 8005540:	6031      	str	r1, [r6, #0]
 8005542:	7812      	ldrb	r2, [r2, #0]
 8005544:	f805 2b01 	strb.w	r2, [r5], #1
 8005548:	6872      	ldr	r2, [r6, #4]
 800554a:	3a01      	subs	r2, #1
 800554c:	2a00      	cmp	r2, #0
 800554e:	6072      	str	r2, [r6, #4]
 8005550:	dc07      	bgt.n	8005562 <_scanf_i+0xb6>
 8005552:	4631      	mov	r1, r6
 8005554:	4650      	mov	r0, sl
 8005556:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800555a:	4790      	blx	r2
 800555c:	2800      	cmp	r0, #0
 800555e:	f040 8085 	bne.w	800566c <_scanf_i+0x1c0>
 8005562:	f10b 0b01 	add.w	fp, fp, #1
 8005566:	f1bb 0f03 	cmp.w	fp, #3
 800556a:	d1cb      	bne.n	8005504 <_scanf_i+0x58>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	b90b      	cbnz	r3, 8005574 <_scanf_i+0xc8>
 8005570:	230a      	movs	r3, #10
 8005572:	6063      	str	r3, [r4, #4]
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	4945      	ldr	r1, [pc, #276]	@ (800568c <_scanf_i+0x1e0>)
 8005578:	6960      	ldr	r0, [r4, #20]
 800557a:	1ac9      	subs	r1, r1, r3
 800557c:	f000 f888 	bl	8005690 <__sccl>
 8005580:	f04f 0b00 	mov.w	fp, #0
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d03d      	beq.n	8005608 <_scanf_i+0x15c>
 800558c:	6831      	ldr	r1, [r6, #0]
 800558e:	6960      	ldr	r0, [r4, #20]
 8005590:	f891 c000 	ldrb.w	ip, [r1]
 8005594:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005598:	2800      	cmp	r0, #0
 800559a:	d035      	beq.n	8005608 <_scanf_i+0x15c>
 800559c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80055a0:	d124      	bne.n	80055ec <_scanf_i+0x140>
 80055a2:	0510      	lsls	r0, r2, #20
 80055a4:	d522      	bpl.n	80055ec <_scanf_i+0x140>
 80055a6:	f10b 0b01 	add.w	fp, fp, #1
 80055aa:	f1b9 0f00 	cmp.w	r9, #0
 80055ae:	d003      	beq.n	80055b8 <_scanf_i+0x10c>
 80055b0:	3301      	adds	r3, #1
 80055b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80055b6:	60a3      	str	r3, [r4, #8]
 80055b8:	6873      	ldr	r3, [r6, #4]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	6073      	str	r3, [r6, #4]
 80055c0:	dd1b      	ble.n	80055fa <_scanf_i+0x14e>
 80055c2:	6833      	ldr	r3, [r6, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	6033      	str	r3, [r6, #0]
 80055c8:	68a3      	ldr	r3, [r4, #8]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	60a3      	str	r3, [r4, #8]
 80055ce:	e7d9      	b.n	8005584 <_scanf_i+0xd8>
 80055d0:	f1bb 0f02 	cmp.w	fp, #2
 80055d4:	d1ae      	bne.n	8005534 <_scanf_i+0x88>
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80055dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80055e0:	d1c4      	bne.n	800556c <_scanf_i+0xc0>
 80055e2:	2110      	movs	r1, #16
 80055e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e8:	6061      	str	r1, [r4, #4]
 80055ea:	e7a2      	b.n	8005532 <_scanf_i+0x86>
 80055ec:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80055f0:	6022      	str	r2, [r4, #0]
 80055f2:	780b      	ldrb	r3, [r1, #0]
 80055f4:	f805 3b01 	strb.w	r3, [r5], #1
 80055f8:	e7de      	b.n	80055b8 <_scanf_i+0x10c>
 80055fa:	4631      	mov	r1, r6
 80055fc:	4650      	mov	r0, sl
 80055fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005602:	4798      	blx	r3
 8005604:	2800      	cmp	r0, #0
 8005606:	d0df      	beq.n	80055c8 <_scanf_i+0x11c>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	05d9      	lsls	r1, r3, #23
 800560c:	d50d      	bpl.n	800562a <_scanf_i+0x17e>
 800560e:	42bd      	cmp	r5, r7
 8005610:	d909      	bls.n	8005626 <_scanf_i+0x17a>
 8005612:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005616:	4632      	mov	r2, r6
 8005618:	4650      	mov	r0, sl
 800561a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800561e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005622:	4798      	blx	r3
 8005624:	464d      	mov	r5, r9
 8005626:	42bd      	cmp	r5, r7
 8005628:	d028      	beq.n	800567c <_scanf_i+0x1d0>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	f012 0210 	ands.w	r2, r2, #16
 8005630:	d113      	bne.n	800565a <_scanf_i+0x1ae>
 8005632:	702a      	strb	r2, [r5, #0]
 8005634:	4639      	mov	r1, r7
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	4650      	mov	r0, sl
 800563a:	9e01      	ldr	r6, [sp, #4]
 800563c:	47b0      	blx	r6
 800563e:	f8d8 3000 	ldr.w	r3, [r8]
 8005642:	6821      	ldr	r1, [r4, #0]
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	f8c8 2000 	str.w	r2, [r8]
 800564a:	f011 0f20 	tst.w	r1, #32
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	d00f      	beq.n	8005672 <_scanf_i+0x1c6>
 8005652:	6018      	str	r0, [r3, #0]
 8005654:	68e3      	ldr	r3, [r4, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60e3      	str	r3, [r4, #12]
 800565a:	2000      	movs	r0, #0
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	1bed      	subs	r5, r5, r7
 8005660:	445d      	add	r5, fp
 8005662:	442b      	add	r3, r5
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	b007      	add	sp, #28
 8005668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566c:	f04f 0b00 	mov.w	fp, #0
 8005670:	e7ca      	b.n	8005608 <_scanf_i+0x15c>
 8005672:	07ca      	lsls	r2, r1, #31
 8005674:	bf4c      	ite	mi
 8005676:	8018      	strhmi	r0, [r3, #0]
 8005678:	6018      	strpl	r0, [r3, #0]
 800567a:	e7eb      	b.n	8005654 <_scanf_i+0x1a8>
 800567c:	2001      	movs	r0, #1
 800567e:	e7f2      	b.n	8005666 <_scanf_i+0x1ba>
 8005680:	08005b00 	.word	0x08005b00
 8005684:	08005951 	.word	0x08005951
 8005688:	08005a31 	.word	0x08005a31
 800568c:	08005b79 	.word	0x08005b79

08005690 <__sccl>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	780b      	ldrb	r3, [r1, #0]
 8005694:	4604      	mov	r4, r0
 8005696:	2b5e      	cmp	r3, #94	@ 0x5e
 8005698:	bf0b      	itete	eq
 800569a:	784b      	ldrbeq	r3, [r1, #1]
 800569c:	1c4a      	addne	r2, r1, #1
 800569e:	1c8a      	addeq	r2, r1, #2
 80056a0:	2100      	movne	r1, #0
 80056a2:	bf08      	it	eq
 80056a4:	2101      	moveq	r1, #1
 80056a6:	3801      	subs	r0, #1
 80056a8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80056ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80056b0:	42a8      	cmp	r0, r5
 80056b2:	d1fb      	bne.n	80056ac <__sccl+0x1c>
 80056b4:	b90b      	cbnz	r3, 80056ba <__sccl+0x2a>
 80056b6:	1e50      	subs	r0, r2, #1
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	f081 0101 	eor.w	r1, r1, #1
 80056be:	4610      	mov	r0, r2
 80056c0:	54e1      	strb	r1, [r4, r3]
 80056c2:	4602      	mov	r2, r0
 80056c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056c8:	2d2d      	cmp	r5, #45	@ 0x2d
 80056ca:	d005      	beq.n	80056d8 <__sccl+0x48>
 80056cc:	2d5d      	cmp	r5, #93	@ 0x5d
 80056ce:	d016      	beq.n	80056fe <__sccl+0x6e>
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	d0f1      	beq.n	80056b8 <__sccl+0x28>
 80056d4:	462b      	mov	r3, r5
 80056d6:	e7f2      	b.n	80056be <__sccl+0x2e>
 80056d8:	7846      	ldrb	r6, [r0, #1]
 80056da:	2e5d      	cmp	r6, #93	@ 0x5d
 80056dc:	d0fa      	beq.n	80056d4 <__sccl+0x44>
 80056de:	42b3      	cmp	r3, r6
 80056e0:	dcf8      	bgt.n	80056d4 <__sccl+0x44>
 80056e2:	461a      	mov	r2, r3
 80056e4:	3002      	adds	r0, #2
 80056e6:	3201      	adds	r2, #1
 80056e8:	4296      	cmp	r6, r2
 80056ea:	54a1      	strb	r1, [r4, r2]
 80056ec:	dcfb      	bgt.n	80056e6 <__sccl+0x56>
 80056ee:	1af2      	subs	r2, r6, r3
 80056f0:	3a01      	subs	r2, #1
 80056f2:	42b3      	cmp	r3, r6
 80056f4:	bfa8      	it	ge
 80056f6:	2200      	movge	r2, #0
 80056f8:	1c5d      	adds	r5, r3, #1
 80056fa:	18ab      	adds	r3, r5, r2
 80056fc:	e7e1      	b.n	80056c2 <__sccl+0x32>
 80056fe:	4610      	mov	r0, r2
 8005700:	e7da      	b.n	80056b8 <__sccl+0x28>

08005702 <__submore>:
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	460c      	mov	r4, r1
 8005708:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800570a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800570e:	4299      	cmp	r1, r3
 8005710:	d11b      	bne.n	800574a <__submore+0x48>
 8005712:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005716:	f7ff f92d 	bl	8004974 <_malloc_r>
 800571a:	b918      	cbnz	r0, 8005724 <__submore+0x22>
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005728:	63a3      	str	r3, [r4, #56]	@ 0x38
 800572a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800572e:	6360      	str	r0, [r4, #52]	@ 0x34
 8005730:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005734:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005738:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800573c:	7043      	strb	r3, [r0, #1]
 800573e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005742:	7003      	strb	r3, [r0, #0]
 8005744:	6020      	str	r0, [r4, #0]
 8005746:	2000      	movs	r0, #0
 8005748:	e7ea      	b.n	8005720 <__submore+0x1e>
 800574a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800574c:	0077      	lsls	r7, r6, #1
 800574e:	463a      	mov	r2, r7
 8005750:	f000 f856 	bl	8005800 <_realloc_r>
 8005754:	4605      	mov	r5, r0
 8005756:	2800      	cmp	r0, #0
 8005758:	d0e0      	beq.n	800571c <__submore+0x1a>
 800575a:	eb00 0806 	add.w	r8, r0, r6
 800575e:	4601      	mov	r1, r0
 8005760:	4632      	mov	r2, r6
 8005762:	4640      	mov	r0, r8
 8005764:	f000 f83e 	bl	80057e4 <memcpy>
 8005768:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800576c:	f8c4 8000 	str.w	r8, [r4]
 8005770:	e7e9      	b.n	8005746 <__submore+0x44>

08005772 <memmove>:
 8005772:	4288      	cmp	r0, r1
 8005774:	b510      	push	{r4, lr}
 8005776:	eb01 0402 	add.w	r4, r1, r2
 800577a:	d902      	bls.n	8005782 <memmove+0x10>
 800577c:	4284      	cmp	r4, r0
 800577e:	4623      	mov	r3, r4
 8005780:	d807      	bhi.n	8005792 <memmove+0x20>
 8005782:	1e43      	subs	r3, r0, #1
 8005784:	42a1      	cmp	r1, r4
 8005786:	d008      	beq.n	800579a <memmove+0x28>
 8005788:	f811 2b01 	ldrb.w	r2, [r1], #1
 800578c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005790:	e7f8      	b.n	8005784 <memmove+0x12>
 8005792:	4601      	mov	r1, r0
 8005794:	4402      	add	r2, r0
 8005796:	428a      	cmp	r2, r1
 8005798:	d100      	bne.n	800579c <memmove+0x2a>
 800579a:	bd10      	pop	{r4, pc}
 800579c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057a4:	e7f7      	b.n	8005796 <memmove+0x24>
	...

080057a8 <_sbrk_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	2300      	movs	r3, #0
 80057ac:	4d05      	ldr	r5, [pc, #20]	@ (80057c4 <_sbrk_r+0x1c>)
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb fe9c 	bl	80014f0 <_sbrk>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_sbrk_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_sbrk_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	200003ac 	.word	0x200003ac

080057c8 <memchr>:
 80057c8:	4603      	mov	r3, r0
 80057ca:	b510      	push	{r4, lr}
 80057cc:	b2c9      	uxtb	r1, r1
 80057ce:	4402      	add	r2, r0
 80057d0:	4293      	cmp	r3, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	d101      	bne.n	80057da <memchr+0x12>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e003      	b.n	80057e2 <memchr+0x1a>
 80057da:	7804      	ldrb	r4, [r0, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	428c      	cmp	r4, r1
 80057e0:	d1f6      	bne.n	80057d0 <memchr+0x8>
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <memcpy>:
 80057e4:	440a      	add	r2, r1
 80057e6:	4291      	cmp	r1, r2
 80057e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ec:	d100      	bne.n	80057f0 <memcpy+0xc>
 80057ee:	4770      	bx	lr
 80057f0:	b510      	push	{r4, lr}
 80057f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f6:	4291      	cmp	r1, r2
 80057f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fc:	d1f9      	bne.n	80057f2 <memcpy+0xe>
 80057fe:	bd10      	pop	{r4, pc}

08005800 <_realloc_r>:
 8005800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005804:	4607      	mov	r7, r0
 8005806:	4614      	mov	r4, r2
 8005808:	460d      	mov	r5, r1
 800580a:	b921      	cbnz	r1, 8005816 <_realloc_r+0x16>
 800580c:	4611      	mov	r1, r2
 800580e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	f7ff b8af 	b.w	8004974 <_malloc_r>
 8005816:	b92a      	cbnz	r2, 8005824 <_realloc_r+0x24>
 8005818:	f7ff f842 	bl	80048a0 <_free_r>
 800581c:	4625      	mov	r5, r4
 800581e:	4628      	mov	r0, r5
 8005820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005824:	f000 f906 	bl	8005a34 <_malloc_usable_size_r>
 8005828:	4284      	cmp	r4, r0
 800582a:	4606      	mov	r6, r0
 800582c:	d802      	bhi.n	8005834 <_realloc_r+0x34>
 800582e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005832:	d8f4      	bhi.n	800581e <_realloc_r+0x1e>
 8005834:	4621      	mov	r1, r4
 8005836:	4638      	mov	r0, r7
 8005838:	f7ff f89c 	bl	8004974 <_malloc_r>
 800583c:	4680      	mov	r8, r0
 800583e:	b908      	cbnz	r0, 8005844 <_realloc_r+0x44>
 8005840:	4645      	mov	r5, r8
 8005842:	e7ec      	b.n	800581e <_realloc_r+0x1e>
 8005844:	42b4      	cmp	r4, r6
 8005846:	4622      	mov	r2, r4
 8005848:	4629      	mov	r1, r5
 800584a:	bf28      	it	cs
 800584c:	4632      	movcs	r2, r6
 800584e:	f7ff ffc9 	bl	80057e4 <memcpy>
 8005852:	4629      	mov	r1, r5
 8005854:	4638      	mov	r0, r7
 8005856:	f7ff f823 	bl	80048a0 <_free_r>
 800585a:	e7f1      	b.n	8005840 <_realloc_r+0x40>

0800585c <_strtol_l.isra.0>:
 800585c:	2b24      	cmp	r3, #36	@ 0x24
 800585e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005862:	4686      	mov	lr, r0
 8005864:	4690      	mov	r8, r2
 8005866:	d801      	bhi.n	800586c <_strtol_l.isra.0+0x10>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <_strtol_l.isra.0+0x1e>
 800586c:	f7fe ffec 	bl	8004848 <__errno>
 8005870:	2316      	movs	r3, #22
 8005872:	6003      	str	r3, [r0, #0]
 8005874:	2000      	movs	r0, #0
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	460d      	mov	r5, r1
 800587c:	4833      	ldr	r0, [pc, #204]	@ (800594c <_strtol_l.isra.0+0xf0>)
 800587e:	462a      	mov	r2, r5
 8005880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005884:	5d06      	ldrb	r6, [r0, r4]
 8005886:	f016 0608 	ands.w	r6, r6, #8
 800588a:	d1f8      	bne.n	800587e <_strtol_l.isra.0+0x22>
 800588c:	2c2d      	cmp	r4, #45	@ 0x2d
 800588e:	d110      	bne.n	80058b2 <_strtol_l.isra.0+0x56>
 8005890:	2601      	movs	r6, #1
 8005892:	782c      	ldrb	r4, [r5, #0]
 8005894:	1c95      	adds	r5, r2, #2
 8005896:	f033 0210 	bics.w	r2, r3, #16
 800589a:	d115      	bne.n	80058c8 <_strtol_l.isra.0+0x6c>
 800589c:	2c30      	cmp	r4, #48	@ 0x30
 800589e:	d10d      	bne.n	80058bc <_strtol_l.isra.0+0x60>
 80058a0:	782a      	ldrb	r2, [r5, #0]
 80058a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058a6:	2a58      	cmp	r2, #88	@ 0x58
 80058a8:	d108      	bne.n	80058bc <_strtol_l.isra.0+0x60>
 80058aa:	786c      	ldrb	r4, [r5, #1]
 80058ac:	3502      	adds	r5, #2
 80058ae:	2310      	movs	r3, #16
 80058b0:	e00a      	b.n	80058c8 <_strtol_l.isra.0+0x6c>
 80058b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80058b4:	bf04      	itt	eq
 80058b6:	782c      	ldrbeq	r4, [r5, #0]
 80058b8:	1c95      	addeq	r5, r2, #2
 80058ba:	e7ec      	b.n	8005896 <_strtol_l.isra.0+0x3a>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f6      	bne.n	80058ae <_strtol_l.isra.0+0x52>
 80058c0:	2c30      	cmp	r4, #48	@ 0x30
 80058c2:	bf14      	ite	ne
 80058c4:	230a      	movne	r3, #10
 80058c6:	2308      	moveq	r3, #8
 80058c8:	2200      	movs	r2, #0
 80058ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80058ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058d2:	fbbc f9f3 	udiv	r9, ip, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80058dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058e0:	2f09      	cmp	r7, #9
 80058e2:	d80f      	bhi.n	8005904 <_strtol_l.isra.0+0xa8>
 80058e4:	463c      	mov	r4, r7
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	dd1b      	ble.n	8005922 <_strtol_l.isra.0+0xc6>
 80058ea:	1c57      	adds	r7, r2, #1
 80058ec:	d007      	beq.n	80058fe <_strtol_l.isra.0+0xa2>
 80058ee:	4581      	cmp	r9, r0
 80058f0:	d314      	bcc.n	800591c <_strtol_l.isra.0+0xc0>
 80058f2:	d101      	bne.n	80058f8 <_strtol_l.isra.0+0x9c>
 80058f4:	45a2      	cmp	sl, r4
 80058f6:	db11      	blt.n	800591c <_strtol_l.isra.0+0xc0>
 80058f8:	2201      	movs	r2, #1
 80058fa:	fb00 4003 	mla	r0, r0, r3, r4
 80058fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005902:	e7eb      	b.n	80058dc <_strtol_l.isra.0+0x80>
 8005904:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005908:	2f19      	cmp	r7, #25
 800590a:	d801      	bhi.n	8005910 <_strtol_l.isra.0+0xb4>
 800590c:	3c37      	subs	r4, #55	@ 0x37
 800590e:	e7ea      	b.n	80058e6 <_strtol_l.isra.0+0x8a>
 8005910:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005914:	2f19      	cmp	r7, #25
 8005916:	d804      	bhi.n	8005922 <_strtol_l.isra.0+0xc6>
 8005918:	3c57      	subs	r4, #87	@ 0x57
 800591a:	e7e4      	b.n	80058e6 <_strtol_l.isra.0+0x8a>
 800591c:	f04f 32ff 	mov.w	r2, #4294967295
 8005920:	e7ed      	b.n	80058fe <_strtol_l.isra.0+0xa2>
 8005922:	1c53      	adds	r3, r2, #1
 8005924:	d108      	bne.n	8005938 <_strtol_l.isra.0+0xdc>
 8005926:	2322      	movs	r3, #34	@ 0x22
 8005928:	4660      	mov	r0, ip
 800592a:	f8ce 3000 	str.w	r3, [lr]
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	d0a0      	beq.n	8005876 <_strtol_l.isra.0+0x1a>
 8005934:	1e69      	subs	r1, r5, #1
 8005936:	e006      	b.n	8005946 <_strtol_l.isra.0+0xea>
 8005938:	b106      	cbz	r6, 800593c <_strtol_l.isra.0+0xe0>
 800593a:	4240      	negs	r0, r0
 800593c:	f1b8 0f00 	cmp.w	r8, #0
 8005940:	d099      	beq.n	8005876 <_strtol_l.isra.0+0x1a>
 8005942:	2a00      	cmp	r2, #0
 8005944:	d1f6      	bne.n	8005934 <_strtol_l.isra.0+0xd8>
 8005946:	f8c8 1000 	str.w	r1, [r8]
 800594a:	e794      	b.n	8005876 <_strtol_l.isra.0+0x1a>
 800594c:	08005b85 	.word	0x08005b85

08005950 <_strtol_r>:
 8005950:	f7ff bf84 	b.w	800585c <_strtol_l.isra.0>

08005954 <_strtoul_l.isra.0>:
 8005954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005958:	4686      	mov	lr, r0
 800595a:	460d      	mov	r5, r1
 800595c:	4e33      	ldr	r6, [pc, #204]	@ (8005a2c <_strtoul_l.isra.0+0xd8>)
 800595e:	4628      	mov	r0, r5
 8005960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005964:	5d37      	ldrb	r7, [r6, r4]
 8005966:	f017 0708 	ands.w	r7, r7, #8
 800596a:	d1f8      	bne.n	800595e <_strtoul_l.isra.0+0xa>
 800596c:	2c2d      	cmp	r4, #45	@ 0x2d
 800596e:	d110      	bne.n	8005992 <_strtoul_l.isra.0+0x3e>
 8005970:	2701      	movs	r7, #1
 8005972:	782c      	ldrb	r4, [r5, #0]
 8005974:	1c85      	adds	r5, r0, #2
 8005976:	f033 0010 	bics.w	r0, r3, #16
 800597a:	d115      	bne.n	80059a8 <_strtoul_l.isra.0+0x54>
 800597c:	2c30      	cmp	r4, #48	@ 0x30
 800597e:	d10d      	bne.n	800599c <_strtoul_l.isra.0+0x48>
 8005980:	7828      	ldrb	r0, [r5, #0]
 8005982:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005986:	2858      	cmp	r0, #88	@ 0x58
 8005988:	d108      	bne.n	800599c <_strtoul_l.isra.0+0x48>
 800598a:	786c      	ldrb	r4, [r5, #1]
 800598c:	3502      	adds	r5, #2
 800598e:	2310      	movs	r3, #16
 8005990:	e00a      	b.n	80059a8 <_strtoul_l.isra.0+0x54>
 8005992:	2c2b      	cmp	r4, #43	@ 0x2b
 8005994:	bf04      	itt	eq
 8005996:	782c      	ldrbeq	r4, [r5, #0]
 8005998:	1c85      	addeq	r5, r0, #2
 800599a:	e7ec      	b.n	8005976 <_strtoul_l.isra.0+0x22>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f6      	bne.n	800598e <_strtoul_l.isra.0+0x3a>
 80059a0:	2c30      	cmp	r4, #48	@ 0x30
 80059a2:	bf14      	ite	ne
 80059a4:	230a      	movne	r3, #10
 80059a6:	2308      	moveq	r3, #8
 80059a8:	f04f 38ff 	mov.w	r8, #4294967295
 80059ac:	fbb8 f8f3 	udiv	r8, r8, r3
 80059b0:	2600      	movs	r6, #0
 80059b2:	fb03 f908 	mul.w	r9, r3, r8
 80059b6:	4630      	mov	r0, r6
 80059b8:	ea6f 0909 	mvn.w	r9, r9
 80059bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80059c0:	f1bc 0f09 	cmp.w	ip, #9
 80059c4:	d810      	bhi.n	80059e8 <_strtoul_l.isra.0+0x94>
 80059c6:	4664      	mov	r4, ip
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	dd1e      	ble.n	8005a0a <_strtoul_l.isra.0+0xb6>
 80059cc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80059d0:	d007      	beq.n	80059e2 <_strtoul_l.isra.0+0x8e>
 80059d2:	4580      	cmp	r8, r0
 80059d4:	d316      	bcc.n	8005a04 <_strtoul_l.isra.0+0xb0>
 80059d6:	d101      	bne.n	80059dc <_strtoul_l.isra.0+0x88>
 80059d8:	45a1      	cmp	r9, r4
 80059da:	db13      	blt.n	8005a04 <_strtoul_l.isra.0+0xb0>
 80059dc:	2601      	movs	r6, #1
 80059de:	fb00 4003 	mla	r0, r0, r3, r4
 80059e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059e6:	e7e9      	b.n	80059bc <_strtoul_l.isra.0+0x68>
 80059e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80059ec:	f1bc 0f19 	cmp.w	ip, #25
 80059f0:	d801      	bhi.n	80059f6 <_strtoul_l.isra.0+0xa2>
 80059f2:	3c37      	subs	r4, #55	@ 0x37
 80059f4:	e7e8      	b.n	80059c8 <_strtoul_l.isra.0+0x74>
 80059f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80059fa:	f1bc 0f19 	cmp.w	ip, #25
 80059fe:	d804      	bhi.n	8005a0a <_strtoul_l.isra.0+0xb6>
 8005a00:	3c57      	subs	r4, #87	@ 0x57
 8005a02:	e7e1      	b.n	80059c8 <_strtoul_l.isra.0+0x74>
 8005a04:	f04f 36ff 	mov.w	r6, #4294967295
 8005a08:	e7eb      	b.n	80059e2 <_strtoul_l.isra.0+0x8e>
 8005a0a:	1c73      	adds	r3, r6, #1
 8005a0c:	d106      	bne.n	8005a1c <_strtoul_l.isra.0+0xc8>
 8005a0e:	2322      	movs	r3, #34	@ 0x22
 8005a10:	4630      	mov	r0, r6
 8005a12:	f8ce 3000 	str.w	r3, [lr]
 8005a16:	b932      	cbnz	r2, 8005a26 <_strtoul_l.isra.0+0xd2>
 8005a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a1c:	b107      	cbz	r7, 8005a20 <_strtoul_l.isra.0+0xcc>
 8005a1e:	4240      	negs	r0, r0
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d0f9      	beq.n	8005a18 <_strtoul_l.isra.0+0xc4>
 8005a24:	b106      	cbz	r6, 8005a28 <_strtoul_l.isra.0+0xd4>
 8005a26:	1e69      	subs	r1, r5, #1
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	e7f5      	b.n	8005a18 <_strtoul_l.isra.0+0xc4>
 8005a2c:	08005b85 	.word	0x08005b85

08005a30 <_strtoul_r>:
 8005a30:	f7ff bf90 	b.w	8005954 <_strtoul_l.isra.0>

08005a34 <_malloc_usable_size_r>:
 8005a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a38:	1f18      	subs	r0, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfbc      	itt	lt
 8005a3e:	580b      	ldrlt	r3, [r1, r0]
 8005a40:	18c0      	addlt	r0, r0, r3
 8005a42:	4770      	bx	lr

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
